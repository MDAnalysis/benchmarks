{"project": "mdanalysis", "project_url": "https://www.mdanalysis.org/", "show_commit_url": "https://github.com/MDAnalysis/mdanalysis/commit/", "hash_length": 8, "revision_to_hash": {"82": "f892b792eefe06cb1c1e60883174230f3fde1653", "104": "9c1b6d1cb29988077ebc0cbce68ab09b65cebbfe", "139": "4b3474bff9bbcd21d9cd5449c161c4359ecdc444", "152": "e6c76e248dc30ccc02bca8906f75ceec02da2d09", "154": "347c152e86aa9c53f73264a84064f927a9baafca", "170": "222fcb10ac56fde93c253eb8b693c1bd582bba55", "205": "9b8ffe9fc449bb0025c89a64d85cdcf4e01d8065", "256": "f6b38a452d1084b1da070199c80840211ea47cca", "283": "2329ec691b91b1fee0a8c6ce66492976f8a1bb78", "289": "5b66e28da25ea637bd900ed925791546e42c9bf2", "350": "189ba23e94225361427cdc2a725013b0403b9e1e", "381": "aad2ad58e3521fc3907601413236b65dd6ad58a5", "429": "69470856800716de88bd3cc6bcc1a46d11c8e768", "483": "727c4697724513edcbdcaaec5a1011da145ea3ea", "554": "f2a497bfbed5d236a6c00b3d654b39ee65108d77", "604": "ab5e9e1bb2b615d8d11edeebf25e9a1a83bcba00", "605": "c6bdc545a53b9a762668ef194cf6aa07244296c5", "609": "1d65d5c162ed7edf5f5b4ee86b600efdeafa851f", "680": "e52b313495af066f70c83c439b0d1d9da40747f2", "698": "7387d8e5de9c6ec68becbbbacc3cad0442c126a2", "810": "365d54cdcb9bf812a3b83c11ebc84274deec3619", "964": "3c9ae52e59f647b9ea1908697dae0afcc5fba62c", "1046": "91ed793b9774061fd0b9f64ceadc2a14a0c1f1ef", "1096": "012da8137735bcef25449d5928b3d959b5d17e1a", "1105": "5f12ae537be7cd6258cc5a45cf61665ed3111f20", "1122": "6ed015c6491b0fb7e9acfacea49f6e5ce17c17b1", "1133": "aa544f563ab68fbc20cf8934e0f9aadda491833b", "1142": "e649a95825cc8091de86141c8da6ae94fc6daa3c", "1163": "bd6ccf18e27a720a5179d02d0e007e20680ecb98", "1188": "1e17fa62feff31559dc2c6817b8c94d51628cdf5", "1337": "128a5c1e1d51d8b7b0532bd07abdfb12e7641318", "1357": "1f1b48f3d9a4382483d8376542194e2e7f092e03", "1389": "1f8e35fac6fd69a2f82d868b465096247c55b248", "1482": "06c93bc0f6e664232e6ccbe401efc2ae02167e32", "1537": "72fe0c1bb1624ff37dec75a2048f3f58218a1766", "1645": "2f5cdcd0c8f1651aa77675474ee3cf526840ccc8", "1800": "c457cfc4864922b9e704124e1393a21d4ec07c6d", "1834": "de97ccc10ecade5e6b255c644c83327f8eaf2d4c", "1841": "48a4641c7805a6e1221d13eb46eef7cc63b2a945", "1854": "f8bdc80656da45c2b35ba052b4ad3ab1104a7503", "1862": "0a81b3f39e6ea7e32343d80618827af0c7c2db40", "1863": "f6a8bb057bd786ea9c2d503ef8c541ffd807522e", "1866": "df0a40e054e7ad54631a3704ece7c129fdb30d02", "1868": "04b7a208ace659209f2f6c4cbe6287d1d90e4eab", "1872": "c3f3a63d800e8d75904ca76217a47741e58edaa9", "1876": "d4351b1353a7ab6f98f7a8cf43b21b39dde9afb7", "1878": "ef3f62e1d31b19e84e35362fc874fe88b73e0db3", "1901": "4a3f08c277f6810dd4681230bdfe3c0fe2b07b70", "1902": "58484f51a3f7145d93a350762ed7f4199e1c62bf", "1906": "915c0fdf1e452da3d29003b1403b1ce6ace49e50", "1909": "25ea3da8c6ae61687d2725848aff5f1fec1b14f2", "1921": "11851bf04fd248760f9e572f0873632182b8ad8d", "1922": "0ff135ac834fe1a85983fde0782feda06a0f0990", "1926": "5b27b509bcb60026ca6c16dd3597d038bbb5ce7e", "1929": "43046345c98a650828da2b67558e1447a7148e84", "1937": "5a7d0e5dc48ba8b6cd6d2f82b57bc10c47dd68f4", "1946": "3c5c3b640b4293a72fd4a20e3d1b41b31cf34dda", "1949": "54c6d2c2ac68c4bc90569aa31fc886749ceb5068", "1951": "339c110dca04516bdb93b84db3218eb0ea6c7607", "1969": "f4185f657547ad6052812d302e14e51750b08e5e", "1975": "e44331c6bd9675b55c9017cab3d8e81485d67f84", "1979": "2d2ae28ccb879554e4181415d38ef0f9c736f298", "1981": "53cdffa9f889a9fad331274b4aad1c10060d3781", "1986": "68df27fa74a5e63d483b02f4ce01affb09b81901", "1994": "893f661196bc78a8a014fb068324b92b28d504b5", "1998": "a6269607ffe456fc1f9f899a6a11d834d63982dd", "2011": "fb1e050f9393fdcee75c3a7b734fa86bfe5be3e4", "2018": "7eafcdf751b5b11ffb69472598a990e6dccd0699", "2026": "f4bc620f58ada3fa2432a631022b780c15d11ee2", "2028": "c2a309ebd491c25e49bbcde05922c2e5d30c039c", "2036": "9da0edf48d84578615ec5218eb6e5f1f5407366e", "2037": "1bb94ffbdd6bab91d067840898fa7ef26fcc4c74", "2048": "f081661673da0f38c41dad7ddf4d2f784479cfbd", "2049": "9fc21313ec019321d96d3c30dddee9162c4b82b1", "2057": "1cda12930e33b4715b93e4a35c9c16c2434a7c59", "2058": "aee590176d4e6c398cd0e5fca5b68120eeea37cb", "2061": "a222aa6d30c8d970b72837a9d8031e1855bf61c9", "2062": "cfdf38b954fd9abdbebd6b58bcea48e730af4d50", "2072": "96e3ce9c289d784eae9ea6b0f7c70d05915cf170", "2078": "cf317f68b9261ee0075a47c801a7e9e0f26e6c3a", "2079": "86bf68966063010e5888c3c1635819a8d87cd9ed", "2082": "aac24f9b0faa61ae085d4cc858b13a39d940d861", "2101": "35fb1b0fa959354258f7d135443cdc067bb320bb", "2102": "11cf991dacac180347975c79a03a06d7f64a874c", "2105": "23e0f724d8a2f6f6b6688b4f9d5fc0301bff402d", "2108": "c675da750c83886eff0e393c5f4a88f5a5e75798", "2111": "b34326a32514ecd408691a44c5d0455c2e27e8e4", "2114": "99f2cc0ce84cdcb5d4a710d1b02be184975b4c06", "2115": "946692ef7a5fba4d7dc05cd31ff1aab6d616bfb2", "2117": "d66927039e1357da34dfc10631d66254c2c2fff7", "2120": "e4d258a8c98c69f74a689147cd39b701de4c41d5", "2131": "d168f86f2b429e6be24539c81a98bcb0defe6fa3", "2132": "37540592e1fa3edfc343dd42cb198eb3e5a6b674", "2136": "20d7e7bec3bc8e2bc431b11d47f0d4195f038d8f", "2139": "c779eac63d741a0bb9f24af6a41640aadd42c4e0", "2149": "0995e04858047d3dfed42241cc959673c9047eb2", "2159": "06ec4b64a379fed89b5d6b014dc9095b826e2afe", "2161": "82ce412a0d44c1a10ade4f698b80acb73fd31fc6", "2164": "0c3aa90cf0a748642a9aab5e50562ca1b9fedc18", "2170": "9d56a863eb3ba2d9b52c18358ec005a6d6f0c1de", "2181": "d424ccf9e4a522e756dea74839f00e7f95d9871d", "2193": "b7a143d2ddfd832b441c1beaf168560f0a8f65f5", "2205": "b47596b69b72f5af088d4ec2b12cdb6e0dcc2dd9", "2250": "1a8047d298e15d3d59dc0a2c14149d9aaa091e13", "2266": "e203b806ad6ef16184bc5ff44da0f9b8dfec0035", "2269": "80ec06ca507843b915793fab32216bb625a247d5", "2277": "05fdf570c05daf3d46fe7e23aec61064ebe219ab", "2292": "afb6e8d4c01ec2ecd15c5d990d5808e130a184fd", "2293": "29031fe2fde7205789efe8f44b3987a82e4036be", "2295": "e354507e91c2f33c8dd5b659c6653c7530dfa4da", "2340": "4a7e3cfa89f583ceabc314420bd9c65271b3cbd7", "2349": "554edc9e79e43672c66f7e382c4e4cd70e7fd830", "2350": "b01f97445084323cfc66f4bb556fb721ab2c7778", "2352": "6c5ea32a6ba29b2ac895e149fa244f857d311a50", "2353": "526b9db1b2bd923e266f8fc81ce5386195c8948c", "2358": "2410a49960493f800b633e38fa51dd8ee1a3a9d6", "2359": "11f87078f53ffd9b4897e1ee92edbf84176a2b23", "2361": "798f3a7eb6e9a51a63da517f31a1a99316a83ee5", "2440": "0371edc6dd25237350a6dea1a75079f54f6496d7", "2442": "d91e6c712d78bee6b788b69143b0bbcf96447727", "2444": "0c80d93425f847b01457e9f356d0c03e1ec19fc1", "2453": "30d0766f731f2fc22d4f56d72271b30396efe32a", "2465": "0d6fbd815d894cf3e8dd1c526afbd8baff2b7e4a", "2480": "2744af369e6969a77d92320a11a1b916604edf5f", "2488": "8bb02d40e4a344f1ec1495e1ccad1dd9790bf095", "2495": "7b91b2a33b01d7d098af2e7847d4a718f5ec8b85", "2500": "5437ca7865302785db1401fb22ed6a793e473511", "2503": "5044e906bb52f8ae758980b5a7a5ad267c63dd57", "2505": "960d9ba79f7be52a97c1e2dccef3dca240624ca1", "2508": "d826144e411dc66bce16e514c8e08ec13f3323d5", "2509": "57934b628a5d61538a08670a60abc617270aeb42", "2513": "9cb2162d895135eb2331822474ff2ddc4ef40785", "2515": "9a80de068cd9057e7e3dc665345840c28ab247fd", "2583": "b91e0abf5c3df5917e5e22d985e3e8d055aaec67", "2591": "4fdc9be5e42f246abeb29cb644db854eeede629d", "2598": "ae755d8da449d73d8f3ecff4d8015affa742d236", "2601": "ac500caaa04b2e7aab37f9d131b5e456b6007f85", "2607": "fedf0a2b0ef31d144ebf6fda7c43d4e9b125981e", "2609": "7c907c247832b7d396510fc568e5bc891b69591d", "2619": "af0e2e13643790e0dd8261bf999627e52d63432f", "2622": "804d5d27e8f780a6ff8cf45f2393f5683acf2a96", "2633": "7c25ebbe79ded36fd20cba8a58d74511427963e8", "2636": "40831d942c4bda65fec8987f4627ede2c643de0e", "2643": "5dc4fde0704486d5fa4c7fc03359087d8ee7a873", "2647": "848aedf4adb368be061135f7a4b29e02a8382494", "2649": "6e7c7da1f3ecc24f4edb785fe946ad430f6a3b8c", "2656": "f13d8c8b327ff9e0ff93555e90090109c35aee1a", "2677": "5330a7c7a7e0e780824f10a445567757c9355862", "2686": "ebc2f591cb9ea604e78a380b93d582174c6e0d0e", "2687": "926007fa8e5b006273a58638980df3cccd210d30", "2695": "3f2ca5b86180035ce95bf37643dd2341ae4611d2", "2696": "448cd70eca3df8b49438fb76c02ee1a61f14151e", "2698": "9b70936c1b18baf6159a439f91a162b0359a8ca5", "2700": "6e1f26d7d8c1228cacf65f4c2f636e3c1d89cb6f", "2707": "a5548e0a90441038a8507b657a9bc049bae39c1e", "2712": "dd384fd4f25ff0c5584e9350b367fe054574c2f2", "2715": "481b5608738455450b743c1cf7ddb7f263f32b77", "2723": "4e4f0fac998a6f5e846943ed07720be1df350afe", "2741": "68b587a54e09b0eb8d2f6823c130a8ed9b2ee1e3", "2743": "6b7839bdb74a3e9047391c032849c96695536028", "2744": "34ce8fa44a1250853eac4cec0d36840aec429dee", "2752": "ac8a98c4900b52fb3e8e175d7b03d7bdeb54abc3", "2768": "0c918f4dc7e4edb9a20bfbd1723b5c02096e2397", "2776": "21ca62b41a37c6d83f08361348a9d8a1dc1cce66", "2782": "2da2f848683a749cb84ae8c0000ce2b4b894752c", "2784": "73d6f59fca6fbd1491d5d1701b1ca603a3d2df40", "2798": "795e5737f2a1f5c1a16eec8a0e749191344dc616", "2806": "8bd70bf8df0d7dc28dca2ce176780f098abdc020", "2808": "41c86ed12af3da2f2ed72e6073f14185b394fedb", "2811": "eee993292a1686b1c9328ec56c1c5601a375449b", "2823": "4c0070109bc5fcf7af86570950a2bfa87e591129", "2828": "8e06aa505ed7e864cce65f05c95144160d5eadf9", "2844": "419d7aa2b56377413cadb5021ec4de91e5b5f0dd", "2848": "17159a20d3ffcb8dd28c193bf17290b3da046bb8", "2851": "173ff26522717af14c798106a87d5c328416336f", "2860": "36d2482da7124f0f8a772260136c52274199dfb9", "2862": "42defaadceef5d848a2f18ac25b8b3fb721e61d3", "2867": "4d06f6540d1c77c99e7b460d9a6af29b6f033de6", "2882": "1b8b6244c2a26e25e517a552ee58ab93d5808508", "2892": "c81ece31f7cffc73c8b146bb4c8854789c0a02c1", "2896": "b6bd755f876ff85baa9321f7715b15fd5a928f27", "2912": "b877c3becea806f9dbcb10d92ef5e774b900fdcc", "2919": "277afec87897125668c4e5020c73a598cd1413fa", "2921": "df5c2420284f3705ec3a6104a94491fdfbeda1f6", "2925": "13a97e481a49cedf6d5e45041f96db35cf563880", "2950": "a4ee46b31139978cca3bee5a7b25a84853d73b01", "2952": "c824225b4a1ad95dc27af2c53b49a5a421939722", "2955": "00163359d1bfc57d93f550ddc347133ea5d82b7b", "2973": "622ebf3a8fd9b99f937ce88643469ddbcc2e228b", "2985": "05a8aa600915290596a70f983350bcc45517fc41", "2993": "33b563bc935f0f9fd47a115768ef873c7a250928", "2998": "247424b8ec67eb2dc4b69ab7a88b03d84fd2ac96", "3010": "e39ace4adc3d60499cfa95552d4ed4cdd101bed2", "3022": "e3a345d07bd7afbfa95694c5773478e6f165fe8c", "3027": "b27e41d7f5124214529cec5778e7789b5de55ae9", "3035": "3de4db6cecfe61919578d43588bc219cdcfb26b6", "3038": "2cc1cc31d3e9af2a773b85ef986d6443521d652c", "3040": "feefee668aa9b10ce04ade61e3e46636dbfaf61d", "3047": "c282d663fcd0f80279bd35cd4459d58fd94eb5c8", "3049": "bddbd81c6e784aceb8d38b51b211ba1dce4c66bd", "3066": "58f13b1ab80981554d38da123f29e33e8a4b6d99", "3070": "7a329b9e7d28cd2ef21088e0dc58cbbba73ff67e", "3089": "b739cecf217505d7a4a64e9e0c2845ebebcf4f2c", "3094": "ee9210f1477139d805cbb66affa51b14a0577b1c", "3155": "86d1eae41418a94d8bf5b79e8354ab010227c66d", "3159": "78331d5435a5287322c04203aeeecab4edb1d9fc", "3179": "96c927262daeb21d00c33b9112e5be283f45b78a", "3194": "432498e375bc26d7b20ece0f7c6c2c4c1a5931c1", "3195": "aa7e871550b16864dd378115d8a1330253b37143", "3199": "a4c31d46749a9253586a98c4e55f66e54d37f3c3", "3202": "9e049f68e8292f68c854687e6a3587877276f72a", "3211": "9ce60e67f84046babd408b0624aae13056fd6562", "3212": "ba2fd3a3944c93cc8031c7276929ef74cc340078", "3218": "2de12903198343ade57274e118de954259ead68c", "3221": "2bd06e54b8d9cede15782fbd25f456a64938877a", "3222": "2567a1aa36ff2cfd7d5814677a632ed96a3ea202", "3226": "5ccd344baf9ec35496117ac55bd7bae86ea8937f", "3236": "a7fb274141173d9a1bec27c43273a3509a9d7be7", "3239": "f914568f4a48e91afe486e4bda0e369d127cfb47", "3246": "b750c24e90121e852451c7015401775c2c1aea22", "3259": "aa27b03e70773be81f935558cd084f8733e4d700", "3263": "69039dfb9d9ea2f1795e69ad0897f341d61595a2", "3265": "cc64b450601fd556b638e38c37db5d134d499cf9", "3286": "aa3d19b68f9a924a204698517db95702618ddd16", "3290": "d68cf73efca409f5c7718290fc88d6147bcdd8fc", "3312": "ca51e1db1991b1b2523af74ed32e2eaedd5f2f39", "3317": "debae2b9e92e88bce9eff6c8bc9c242029a0d1ed", "3319": "9c1f8fb99f5504d8d5726a856ed91ebadd8cb03e", "3329": "01e4d45cdfcc8ccfd116080e93f77cfcbe6cc27f", "3393": "5d78f0302bf55180c34a80fa897dc2a960cd298a", "3465": "98d5c1076147ecb48834ee289328088c741c20cc", "3486": "6c6510c87fa63678158a12ca8e7d5d330ecc78b2", "3490": "9a632a91f23efb7f20a23c750eced293cd930494", "3499": "3f934d705720b9f9fce29ae24e7d8a06d1ddcd51", "3501": "abbb7d33965a48251bac3786c489fd0e01f529df", "3510": "e5c98deb0c21a9acf7c88debab83f0cb6c697e1c", "3556": "df6cec8d5521311817b619608ab53d748f397b2d", "3585": "a1aa84449f45ef967c96a7b95ad31d3bfce4db66", "3593": "89f094eef7b3187ea9986324ae205a82fdf2c126", "3658": "54d48dbaf1af9360af550bfc6f10c5d4e432f527", "3731": "b375b4b74bf42e716eaa35d65e5a39ed20762b46", "3761": "843530c5ecf5c1171896d7917948bff3233f13a9", "3764": "06c3e14c6e2c8df0e5dd18451e4bea2f61075d69", "3790": "8f803a45b70375adfa584e2d62b9d3f96f2a5852", "3797": "7e5b003299810c54240853473c4f3a8162983706", "3801": "6a383dcfc32bbd2db54308020ebaf6a2b4f9e19d", "3806": "ffa4835ff6caee39af5845e6883ce0861fad1bf7", "3811": "39b4324c0abe3952aee0afde1e282480f0992707", "3988": "e6bf1f9dbf169dcf2c32f827201dad150e5d5ab9", "3996": "bda971f5da41c5e17d0c1633fcd64f6bf02242ba", "4106": "fc2400542d23ff2f8bee6e61a485ad0b0c717ffb", "4287": "168e592a28e2d642c6d5be92eba5504302b779e3", "4290": "94f1d75a378677a2ebc6ba4e9f242b5b64cfb277", "4298": "9912e153a5a7095a1d7a6ff1f63f5922d1bf165f", "4309": "66987a66acfdb0927fa295505c3b6725279c8045", "4324": "4722e070a0f7394975d3a6bee2fce1f37dc07fe6", "4344": "d080250554d89504641b762bd84cd275eae57c4e", "4347": "bff425cbc672245dcfbd6f236732e213bc1e19b6", "4348": "df97b5054980f2c96e4f7ca122d95088a053cb5e", "4360": "a6a6db3f9147500f05e61bc8a8e1629be46a3505", "4372": "69f9a950a99b1bf078c02c7eedd66e3d2d77408b", "4383": "efaf156a923507623ea0669176065458bbe60bff", "4387": "4a1113df3baa316c1b073245f2dc7859df6331e0", "4390": "8891fcb11cefcc5fb755c3a96db59e084a11c35d", "4432": "ca690007daa33e60a72a5ab0c97fba1febf44612", "4433": "6a4e42fd925e925e389bc879432f9605b22f9c76", "4434": "6eece4d2774d8aa37498576d99ea7c42a005e9e3", "4435": "c6050648f526436cbe4fee944e2d0828eb9daa60", "4439": "bc05a221dae97085dd2ac49a80d89c16b20a9737", "4448": "bf378bf72fbfe1211e41355d3abd328504b39806", "4455": "58200c876b381a006b42285c44e762defc332241", "4460": "e15836f0c31115824611b70cb23c6f102b0ba590", "4463": "cd2f1aaa4ec840db8b78290e8c57e2801c9abb03", "4482": "5838d5f482b43ea3ed1c7d4400e4dbdc712fd8b0", "4505": "39c29e5154d316f41ef0f47910cb04c6c7c0ba1f", "4508": "d88567f1842ca059088f0b47f986ffc3f80ef95c", "4525": "789a96c73c35292110e07f8f0ee2e92753c77c92", "4526": "e35660492586d587d500a056bfadb4d2239ab7b6", "4528": "f24df4a202c4248405b52695c377845543102a30", "4539": "9ef4db2baf18de6ea5f4ee7b493458a9be5463bf", "4550": "9ded575784673baefc181161f80bfb91b5f7c2be", "4561": "ebacb4f2b7a18a43ea41aebb640dae066c19e90f", "4595": "dad6b32f29d89cd91688588426a256d0495b2a6a", "4633": "e879b4221a673a50a2b5ce3e22b431970b580ec4", "4646": "94f91804815b9b531bba38cad6e67240d59a3009", "4710": "da70c1f5b685e7ad4e5d6b2f7b1bac1675be04c8", "4715": "180f3144976a6394503ff9b6e4ba9656f81c848a", "4737": "39d5daa10556ac00dd0de03945bc9d75fd302462", "4766": "bb5d106a64056e542e1a9e49f45d9bebd5630a44", "4770": "e45493d45ab0abd9a279a4b6554b61a3f07291ae", "4779": "232a4e77378a7a01f6fb9fab12dddd920b7e7245", "4785": "803d8134b994a225a0337c9be652d14f307cc365", "4793": "4d0f3e3127c1a6ade53c04bf7f93d916cebcef39", "4884": "1b165be7a06b7c6505a4430dcca98503c7102e5a", "4889": "f3db4fa7ceeec5017153d061cdc4649dc61aa850", "4904": "e9af1719429bb8996802721ff0a3ddef32fd596c", "4905": "6f337060483ce49edcc9f1dbf863e3a9376eedc4", "5063": "6a274d7a42a16ceb30db3523a4c1a02ebd15729e", "5066": "445d679e598e6287f1bcb1cdf10855ab0f0a2524", "5071": "2521d78b7bf4b480fc993ede0bcc365177a702f9", "5106": "ca30efa938a0123b546429ec295e8d6a151bb8fd", "5190": "afe690bad8657b442cfcd5487c01870e8fe7fe1e", "5197": "d5667ae9b52c1f14d9cc0fe3cb77799c9a5635c2", "5263": "f6bc4861a0b997f2e29979101a6265f263e4a382", "5270": "ad5ff75c26bb4caa2191a37e1391b32d72b77507", "5287": "e12a64749ffc690918e97b682982c0ede77cca63", "5323": "723cd8985052e359bc0cf1c47dc45e70c0f6951a", "5325": "805c6c222a6176c1866156d8f852523804ca7776", "5340": "3e4a973c7f2946bc54f8e8b9720f80d8a60c69fa", "5344": "6e6aa9d0c7e9436ec07e4da979589d8d8a8bedbf", "5346": "ebe2b84e64456aa7ef9d665a281f096f4dbfbb00", "5480": "853447cad69746f7c3cd93ba717a6c4806b5db3a", "5498": "3cb61d67c0ff40f4ee744886c1304b0110feda50", "5542": "ea708b09d75ded215e541175c023276a9afc72f7", "5610": "566bcca95dcc98e75c0b6c2dc855ef4939b4cd43", "5717": "742d7c460badd2e0f73c49fe30bdc4fa62b9dc3b", "5722": "6ea0eb129e16b5e50b2b338dc87bd89c13c6ce47", "5725": "cc34959fa025981472cc815b05c355d66c091b51", "5816": "277127c8ace815235784e15a6f154913852023e2", "5854": "3dd9d3c2c01fff6992cbfd200a6c182b3f02f78f", "5892": "301c7eb1577cbeda4493b744ce85115e8f1b75d6", "5920": "e0bc3034042411ecfb9eb123e5bb207c593eba28", "6025": "d8af6c76ec65bff71a8638d9c0bed500f7855c82", "6075": "60d013bb8f7226e7a4273337ecd63db6807f0e79", "6082": "8f5d4db8c91a3891b0f810a68e62b6efb068b457", "6097": "76f98c50c2406d1f6aef95622446c2baa3cef9d5", "6098": "6a856aa7168a0ac048136108370e28938d9105cd", "6118": "ed17728516801a1002e607a4c606c400fccbd4d5", "6121": "4fde59649831972fb4112f4094a9c68041b8d519", "6122": "d98f063799e2f72999ae96dc4025fcc4c0d5d0c0", "6145": "4c465e91e697c050a54492a9462a185cf0ddb173", "6146": "7b383c1acaf1639a4b70b3b088147d06c29b22af", "6147": "69730f4a5f19e3bed621a70de5f0b89cd69b0b6b", "6267": "93a8d8c3929738f1b67a4940f78f06a14e1e39bd", "6279": "ec1e983d87d232520248ee266313cdde668110fe", "6326": "5e2d0ba207b09646ff8957298fa444d20c050d3d", "6331": "bc36840e81ea48ec182f0e57fe11d48572ab2996", "6348": "50c24e432d9621bcef58978f46d4d1d8b0415848", "6351": "0d673de3560f6193535fc4c6c578b9b7ff97f23e", "6363": "65a6d6be8b497433ca27cd00fb2d092dbcad9651", "6392": "d5dec2b6f2be00fac35ee8f9be0106a244d6cc45", "6405": "3eb900ce609f34829def4239a2e4b91701a2f38d", "6409": "d833bedd830b6314d8f23dcf79204f341a5b4924", "6413": "2e22d06e356449723ad04623311d25f2591b8106", "6479": "9ba1ab964920acfc986d8e264f78c965e062e9d0", "6494": "9b074d53ce84f40de11c9599349d75cdfc12fa8c", "6504": "1322f55d8de7f45f0dc30bb89cb6550078c13365", "6510": "1e11a67c39e35e3fd4775a6ac759440eb0f8cabc", "6540": "54d5bab1b2aa27b7f914078cc3e5a892e79ef479", "6558": "88676469bfc4db0b16f7f3f0cca5260f6e6b2bc6", "6560": "eb3678da955b768e71f94a70f7622f1f82345666", "6567": "f878fbf3279fdd576a6e28975cc378b7a1a660fd", "6568": "a35ce016fb8301d40cd6505171907ea0af9cd584", "6652": "b837af1dc9d2b4dee2a5c6ea61639c369a011014", "6680": "f7a6f47e9c8c4637770c2c0cc0c20da841d11622", "6685": "d9ef4ec1a5c0be61db887708db2eae4baf295ae3", "6687": "b56ef0165d814f898590eb18c801ec5a7b385f21", "6702": "f658404b68517eb5d6a02b826021ae509122f340", "6703": "62522f53aff36255d41ded9d24b01a9ac0bf50b6", "6704": "0ac274e6dcf03ee4c5c6b2f2571a6d23bed5417b", "6705": "c5504e576a0a926475e495ac448a53b34537b3b3", "6706": "494541510d14938ed706ea4e391c406e5f6a5d1a", "6715": "8664cd767352a760d8f0299b76eb57494d3e52bc", "6716": "6fb2727e0dd625b79a7c4dd16911a5669aa98f4e", "6717": "9851e32791965fe1e1f0aded153dd99ad62184d3", "6718": "2cdf0fb8422040ca8ae405b81172ff8204b76091", "6719": "46d90c4ad5937b59c295482bef4f1670e99acc0e", "6720": "1fd24ebccbd54165d918f55194aaa30423110077", "6721": "f170e59e51a4edbb7b48c9c8bb21c0a214fa31a1", "6722": "7a82fa9fa924f740cbab823d6a46d392c1029168", "6735": "1ae6ed5562aadf48d03777cc35a8362cce5a6405", "6736": "eae5845cf5488ae1db1cdcc2075f68406291721e", "6738": "2703b38b5fa7f90857d1dd5a3d2a6020861913b2", "6847": "eaaa9687be10215692073117b7047eba900c1dc4", "6903": "e94b1c412b9b73a2350e4b992fcee28ce055598a", "6988": "bc374fad683a810b448d61d03577eda2f87b5c6b", "7013": "d1f6b8c1a03130a9bd8cc5760c2f249074178699", "7034": "74defb7fb168145e58388cc67af811559cf23921", "7041": "5a232a3168c4aaa1590bc42615ebc07773f14172", "7071": "ace4dc85d701a3c3649bb686c97eaddbf0ca6621", "7079": "1ee4ce9b76e161d9d99f6de74e6112bf23f2b37a", "7103": "c84c86cc455d2251b89de482d2b4efe6a7da1df0", "7132": "8c331d7883ccf4a61dec884f2d95110726ce7573", "7138": "39b0e4cc184725cd0e5e710780c8154ed4de9f4f", "7177": "e50fc521b7ecb7dcda983c5689a0b6f09285ab89", "7179": "c97395b9a7cc16a1fc0a14d75f5445a4d99320b6", "7192": "7a7dd60b2fc44217fca8c3702144ebdebc2bf260", "7282": "518091f7a2359660897365677213e25d83499ba6", "7310": "44631d040deef932bdb2e1c52b3ac457dd89684b", "7315": "863c2f71321bea55578a0c679b4934f86f916d2e", "7357": "691e785c93692b2314400c2c8163e83f2713ad85", "7363": "14a404fa2a0254767aec40a7c024b2f94028e1b6", "7411": "a0bc631699f7619a12aa2ecda1e3fa06113c9507", "7419": "8883f906fd4d921d050573a1ead297f2624ae008", "7420": "a5e235b994fbbac94d3f385f0860a3c40e8fb399", "7421": "36a7a5a01dfa2deaa03c8ffeaa2e277491816a4a", "7424": "339c5106d8ee71d6c9a7ab88eb2fd6fbd2354140", "7441": "9bd5b09b56948c6a04318dccb28d4f9f51b7e922", "7450": "060e2c228f2b176421f1eab0db2513ba7a9cb1c3", "7498": "c487972b0ecee02261a166bda6d2a0e82c0e7e09", "7510": "b71835004d49f9eecc741afc5b13feff29253528", "7515": "22dfcdb919d45d3b12151ea9dc873dd83921295e", "7525": "01e2511afe0dbb8096eef3733162da157dd2efa7", "7540": "1a1b2f1442d52d1216b53b32c4c42c3b47368d38", "7567": "86983294f1021aae5369412363c4edec495ff514", "7572": "1d6e67032654471cabc5c83553be70b3a8e7a653", "7576": "89d6f2b3298f84b58737d733400f6468e2581684", "7577": "bba488a8a284528fe2f011ba4be1850b5be542d6", "7590": "28404e26ce56355a461bbfed2b4c6ebcdc72c6e8", "7593": "4be325c3b46ded353a17dadec9cfa94558f17080", "7594": "675252af36128aca242af3e2d4a9cbbf554f8d3b", "7605": "50d8687f07ac978ba18219e0a3f873015617dac6", "7622": "f7d0e4d5fb6eef62a496a18cce4a9ceea9a9d6dd", "7632": "1fbd1552feb559dbaaa32e43793c740d582b5d7f", "7633": "5f151b48525a5d1d3d00b73855dbf6fe88960b69", "7636": "d7cfc27978a8104c17340eac8339560eabde15c6", "7660": "238904da5b0a055db31bbb476e63f95d3588cd89", "7707": "2a6f1f61734a53bbc2531c4f7fd5797c8be3eaaa", "7730": "b50c6f02af8947c3cde44f08c4f5e26d1f6b7314", "7741": "461aadf6733d234e0913bae774a6312a208ede27", "7785": "50f4300546894db3f1d36c0c9bc6bb09abca1cc4", "7801": "5455500094820e267689aaea30d1e2973b06dee3", "7808": "3331c8df1f706159665b016160756fdb0e7bd03c", "7827": "c00a04a454da92acc6bf866a0b357f7987aefd20", "7848": "2c9d6c50dfeb75b07f8aa87e299a717536b51931", "7851": "bf424a5d3ee43844d66fed219841ccf6acded692", "7855": "6b74bac909141477a6576b4560755708db50c632", "7857": "f92ec5da70805897bd6f874204e822fe76cb8722", "7912": "bf03cd4571dab9ab16d95348dd6805de9ffd24f3", "7919": "10e16c07b3c8ed8fc43ba7f5816496a8aa288fda", "7930": "e90dfd2445f2927a40a9f8e8b0317f485875e267", "7940": "e2c2b560fd198558a1be797e2dda06e968b449f4", "7945": "0f18f489ff4d413f97bce9bab077d895751372a9", "8007": "10fb62d95f52e7b6b77870a53a35e7adbc477658", "8025": "dbad72cfdc0ceb2d16e0f91c978acf8615b6e8dd", "8028": "388346d38370d833b48152f61405a18942d25251", "8067": "85ec60acd0f868005d66faead77c957b54b0d7be", "8072": "67d064a4515cc46404b9f15e0bab90c5db59a971", "8073": "d2e22ffb0cb46af5266e39b940d7f00c1ca293c1", "8090": "e3966303776577e15a043daeceff5a591370398a", "8095": "6f34d3cb6e5e464724e991b3703051e1d99b8f5f", "8105": "5cf8c5599e1a27c53e774c436b4e03fe71080f7a", "8110": "57d77d80a3236e9503473e2609ece2bdb59bc07e", "8121": "e9ee6be5179c0589bb729774cddb7393df490f5f", "8127": "825ee05423085521e6a718b3527be9b723409280", "8131": "5eebb18bea3a89df08dd3adfd187b9ee18a67d1f", "8139": "62c35d49bd9458f2b5057d28d4904391a4a38513", "8144": "d73b653f19e8446bbb9de51bb41d71f78d148d30", "8151": "9cecdc92f6ce952f1e7ab3b6ccc49a1450781ad5", "8154": "b89c23dfdbf406ada5b077c32ba6e04b8d51e56d", "8161": "5fb8de84d7931e518faefe829a3cc4d3eae42ff6", "8171": "cd58ce0797b466d3a584beda765b58abce7f9ec2", "8183": "e0a2b16c41c443f4f72b14e8af5c2b77051915c0", "8191": "1552a8b5c311089fc6068ca7077be80004b38f71", "8193": "b5ba583f8834b384a596691f36a787a3aeeef9f0", "8201": "6741d1a2099381a4833c15f29c4334c934d4b87a", "8203": "ec8dd20a8ac5554755d311a395d7f7c75a0092d8", "8216": "ec246c59e8b26a4ff96bbcc8fd93adfe746be37c", "8218": "259f77811ba4af0e3dc5ca44d99766c29b6e140e", "8225": "55e747504e51f873dfffdf8356ce425cdfbc6f08", "8228": "8918d42d1da0c653f41295fb7a131d7c04d46578", "8240": "edb1643c0a78f7e5447aa3ccc02712e4205ff073", "8253": "80560daa2fb582a5365ba1a9018d5411f91a604c", "8257": "d37f87b9db93881c925848a19b6db7c63fb9e6f2", "8258": "97db6d1742e3d16dbadf37f01f064821b6f66351", "8267": "108ffe0b19080b39975a93f947162f7371ac9144", "8268": "25b27e13be4079e9cdb6a156d2120005e7bc9ae8", "8272": "9667c6d776491a3458843b2f75248504a1744cb1", "8278": "b951ab41fd3485e8cb48047db91eafaf703b6373", "8279": "a63d6783709982c68371c73c93cf3bea1182ba27", "8280": "276d5eb7de722461b71364cc504d75e831b20319", "8281": "044ce565232a2e82d13c45d73b3b8efea9b7f01b", "8285": "37072c333183196f5f5156a37cf6b092b2f7ab0c", "8286": "983d974aa92ca77e0193db3413ea406893818a51", "8294": "e08e8174812fa604f61517c81e3ae9a3203c0776", "8311": "c9a37e3a494f741014cf3fedf1fa2606c7b43a24", "8316": "2ffb7fbef7f5a6c32b5f2a59719441e75fec95c6", "8320": "7b0571954d9d9c420c795a16cf678d5ccfc32095", "8328": "89b2299e3ae8ab548fcc932b72eb6128b2be0463", "8335": "0d7367d05f1250c2afc8be7e3768011dede1498c", "8339": "b7f36bd148f1eed47f2dc935b89d28c8cae468c4", "8346": "5c19974c43125c94f98ab45d2f9965c70e427eec", "8348": "333f9580a06d50cb56b1523cd43cb86fe0fe95cb", "8349": "524f06c3abe60dc68d4160b6a09330f9a1609b94", "8350": "49552db8d617c95bd0473f5c45c9b3865d486240", "8351": "19b3140c901f66b7c7cb641391c190adff9b4da1", "8352": "7aac26a3152dd1a707009cd79009cbd49a009e7a", "8353": "ca2018dd55a02936384ecec0b806405e8a531e5d", "8360": "966391cc96918a86b4feec7b96797161682ec842", "8365": "5d6b871f8d30fd7be5c2d44be3025f9e2419c94b", "8372": "93c48f6061efc43ed2c9f3c042c931883c8465dd", "8375": "aaf2f9a5cd7a21a3f58cb1e7f9f71ffc71281404", "8389": "b28df550e7b8711dff52a5afc4386c34037e03e1", "8399": "71554d57e7b234b2a8fc3890dadc4b2dfeaa8fd3", "8402": "c4e100749216a42854cf0537fc80e5f2ceaa8930", "8405": "ef4b583040b6a9ce6ac782732bbf8cd6ac51072a", "8410": "aee45cb3c53b8235e40bfe392826bb08a6684737", "8417": "e65ce63a1705219fecd1b0c0d1363ebdcd7e0688", "8422": "4f204c4cd76fd728d4a04a67226cd85d2cf29661", "8427": "abcdb1e2423ee4714c5ce7b5ce3364778a5a02f7", "8445": "24972e6658be244ae7580bf6aec6dbf30d4a982f", "8456": "1ba893ac8fa00cf7bf71937fe7fc29c8d04fbe20", "8462": "2bb0aa72c733793a05084dd45afcde3b8e485c02", "8476": "214210d28852a407829183df1233a4b19903d01c", "8493": "ecef1c7141823c87d520ca2d9e52d5e9c2d25696", "8495": "38577cee5100d964763362d3da24575e2a554572", "8498": "a2db387843874b669a63baa56cbb125fc6274486", "8503": "5d2969eef3ef68dce2bd1e7b08db6ff0c0c6715e", "8505": "992bd738f5cd6c1a16e8e55fc82cb3f442bf239c", "8520": "33395f6f7c52951841470fc2643d741060304d51", "8535": "3d7396798e2bfc392157d313ddcbd3cfa99b3a5c", "8556": "0fef1a38143f4bfcb74dd44374d915b31e8b5a6c", "8563": "4794389a41cecccce490ee434ec00aa4c6c970ed", "8572": "f5cea86425b75ae8f4ca71accb53f66b94a9e815", "8579": "77d8f7c4ca776938bfe1f627e3791c87cf55ece3", "8582": "ea05c5a62c0862c8c324967a49f8a46b5859b8f3", "8595": "31ca2502acfe03ccf19738967373471794933365", "8596": "0cf5fb949fd8148715722947fc23d0d9431cfc0c", "8597": "9e8b2c3845ab493c982d2684b859e04a123dd9f7", "8598": "57217739904a4ba592a114ffdbdc62c9e19567dd", "8599": "52707926cef8e65ff1031eacc05301a98b418383", "8602": "1cdd44ecd32307d7ef42ff4554c50aa96a768155", "8618": "0f8220412c683c1096e938ad03dbdff8f7eafb33", "8619": "fdfbd6b2772f6bf7335e2cad261e9d545294bc34", "8620": "20612402806d64499ec31cae811180a4bf0c311d", "8621": "6fcc6a427ef26cde2b29df452da2f0879e167d66", "8622": "ea01828673857c072a52d65f772e6080c69844f8", "8623": "46a7807bea1ad105704be5c52ac43aa8b88c64e5", "8624": "842cab5b04d49aa38b6398354d4977372ec15fcc", "8625": "e31edfbaf82b9b9f4f26001d4c765f13c4bc55c8", "8626": "bf91d1d705d7ca07040d7ccae62283e4ea324882", "8627": "18c575b82a23317c58d07ca6ae15c41e6ac1bd25", "8628": "31e8e019732a71e2be0fc8d62674761e4d2795ea", "8629": "4679d8016cf8026151897ada0b3c6edff38beb61", "8630": "dfadb7e2d5c74b093e16ea62b156120e087ffeec", "8631": "839410ad63154503c87237ed08dc5a2ec7c1a8c2", "8637": "78ac16aa34cfd685ebb53e533f7c3ace99703801", "8638": "8caa288731464461864c6675e46b90fa52f48bd7", "8639": "ddab79eadb96c7b8e72f85b80f64ad8f39205b92", "8645": "f51ce5f14a2f21ea30863f7c1972d49d89fc1a49", "8655": "eefb03f05f5768a3be3192b27ca2a61a61a7db5a", "8656": "dd448cd220e37640f3d63881ef19d9bb710d6abc", "8657": "8ac2724a6bc9462c1d6d61713b24d567963000ea", "8658": "741052f7bd61d7ec28ebc17e25c464b9c127cff9", "8659": "c9d7a5cd0a6c4a0d28a3d8db5d16bf864b11065a", "8660": "02c0872c00e9814c042f1a1ad89caa1e30ec5bad", "8661": "efe963c47ea68f81bbcfa1618b83c9ebc1b5dcc6", "8662": "d8c429f9a3b9860fa57135c51c76b065629941a7", "8663": "94288667302c6d54321f0237e39804f69781867d", "8721": "6a60c8aa836acbcab973ae81e10e3a2c9b782fe8", "8732": "7dfb65a9b084c9d5e1121878660b34c08230d9c8", "8739": "1be9f73dd760eb1c3ebeb6f552a837126374e41d", "8743": "668e1836a0799c0ae2cbd10d9b73ebd494afb0e8", "8745": "3f7f633c1ec3e5848ac37340bb0b02345438637d", "8746": "e405413e34e99d0bba702ed9c6c46f468057e919", "8756": "f878cc10baf1ef0c25de931795117e175fb965b6", "8762": "d9353e87c67806e8a710a7e0b5bfa1d6ae058ace", "8763": "cc57aa27f4ba9f488dc6500b65441931d6b7567b", "8764": "50c32a09f4152873f0f6c4dc3f53f67de85f0872", "8765": "da5f93428f576f95379e4e971c5ca71815fbdfd5", "8777": "fdeb7242017b57fd01644d6626d2c9524feff452", "8783": "da4979d2db19f0dc93fe27ecca966f5b91310482", "8788": "c873b086389270f425a754ba962ca936a89b6455", "8789": "26561ad8ad5611da437bca52536ea25082e00762", "8790": "367cc60f4ec41ab4e776fe83189e4aac74677249", "8791": "c7c394e68ff862c2002a52d3b55e5bed965df32c", "8794": "2196bbdcb4f44d0353c72cb4f3d8bdded2693606", "8805": "1ea4a574134230ccac302bcdd33c5419d0ac1fe7", "8809": "75078ec1aa97ba09f416889f7709096d86f545cf", "8818": "f83498ec6b5cc546a0d75598a4d1d6ede6fe2782", "8844": "c820cc5143c504d06680b5e3fa42a3eb495c7be7", "8863": "b0c70cd713d7139534230043dba150edbad1039f", "8872": "66038c772c1c045d690d2b0ab32e073e01f6ee14", "8873": "f3e45692a1b55260721654e8b6a47db26d63d9ef", "8878": "8212fc76ef321dc3798aabfd432b861fa679b3b7", "8886": "90232931b4327ae5041520aee9aec78befc5caf4", "8898": "8dd88cc7ab32da226aae4c1dee44829f6bc7f62f", "8905": "2f878525fab9873df02bf9ef891dbbb395432e35", "8948": "6185a57cac4d17eb1d98fe5b7114665fe7ad8a2b", "8955": "b1c68e4bfcdfaa2230121e28783e1c67469ac040", "9021": "fccfc24d0704aad774111f93111774eb5632a10d", "9030": "89a9514e901ff4e16b93b4244d52379f667b7cf8", "9041": "7449a38ebdaa80f7bf4df400df7855d83a5a7037", "9047": "67aa3b7208056039672bde8ef23c5b9be9d0f452", "9074": "16aaad181b65baf0fc8d6a4dcffe66f28131b456", "9081": "165d2e485d91db2672762ef0f753c164d0b56e75", "9086": "8cd80d14ac0298251325636363c0e65d47224897", "9088": "e071ef437a303d2c3310e96810970d257dd7dbd2", "9093": "78540119b3137f8407a31a95dd1cca0c79ceef19", "9108": "b39796e941a6ff566c95298075a61fc220df95a3", "9113": "e910a12b67ffe298cf03721bb3d41d7e8a380be4", "9128": "9b227a8d3b59486cc0315663a598e6c014e5af59", "9133": "b7a8590dcf77eac4e4381e19ac4edba4251aad31", "9135": "57bc1838c3bbe043860573a3df11dda1d490d424", "9153": "e059c92fb678c821f4928e8a667cbda86690e363", "9157": "7c468a46344d17f91d44059332fcc533dad01cde", "9161": "e524f192b68a94043df7ac3aff566b70426a3ea1", "9162": "80605265e9cf265ad69fbe588cf4b1740ef27e15", "9163": "f1253ba0076d45f414fa6347c1ee744f7801a319", "9168": "6bb195924919e7ad56e68b5ee84f6dca70fe9657", "9169": "1e8167c6d292fef062dc5e5f98ceda4d7fabe3ca", "9174": "e9ac561c9ff61ae914830ac5a9c6792a87add0ff", "9176": "ee4759293e1a4a5109c6b66e133acb1af7d24b0d", "9181": "df914698c560e7c62d46803abfe8aa23f02ab823", "9182": "d1b0e659329b1d98fc2422c88614a196976f3497", "9195": "e8df31e7ebf84ad2bdacd58530ee76903f594145", "9206": "bb239f94c4f4313a66746ac5d76cf43c7e27c7a7", "9209": "a114b6b5d5f062bf1c3cedac96f026e187c54ccd", "9214": "663776c4e21060505b24efd7788ffe4ad54412ed", "9219": "5ff1c24550d5b717d72d695fee70314bac608e3f", "9226": "0cc020c89c8dea89ff8934b79cbbeb429ee780b9", "9230": "9372d093acebb78bc5b1a2b4dba815a4e3281b04", "9250": "30fc5c0136501397d890614fc248f13d8a46f487", "9251": "6f88517f92e22d39206f815e8106b529699d8f2e", "9256": "1cddc1226d70abd52da2b8904bb2a18a8e6aae7e", "9257": "530bb513bed018ce2f8b9ff08712dae596bb6329", "9258": "f044278edbe2b2c8ff092dd60b633308cbcc06a0", "9259": "a77ce8d7bb9ecb36cd610591764f23550723c257", "9260": "54a7addd3630566364b6f59c1f9c12f613b45c14", "9270": "dc67acfcd6eebdf8550b5cc05f745b3e6e1998c9", "9289": "1a3cefd5843e681e3dd995abaeef94b236acf454", "9290": "68a252afd70f9f532eb9e0fa0392cd014bcbec7a", "9291": "0a99d38eddd7533ef471f7013c154ed55d7f105f", "9292": "4f6edbaabc6e34436c3836c8fd971e9f86897103", "9293": "964f8df54be0f719468f3ecda2f24c4d6a77656f", "9294": "2501d3e014943286dcb123139e3028988c61718f", "9318": "13c7e65a3b3c4bde078fcff965e6124bd0275feb", "9319": "250a674bb6db702a88dfbbeabce3da7b5f4aedaf", "9320": "09490b3eed0c8f4f0072fa035372bd72659c21de", "9321": "e811ab9678e2ad2b7fc5f43765470152e580f1b3", "9322": "5b477f6f1724d060c063f4ebacacc206240dca93", "9329": "7f82b88f769f3882e44b5121463c93b899ef5b55", "9342": "af8931ffdef5e841cc39b980e3abb1b7d9ee0e9b", "9343": "2acd2b632b172b0bc5779974887f8c1837ebaa08", "9344": "e5c913f68fd34ddf750f87f7a880f10e1bdb1ab0", "9345": "290730eec6d919682231cbf2669325b3ceae90ec", "9346": "139de3f352dddaa82becd68e1cb0968aa6b4220b", "9347": "971248a1cf099f26db899b899a8e10d4e96ac3cd", "9351": "bbe0d26f810647863c61ac5ea03cc2f055861b58", "9352": "240586ebcf6e0136384406bb3d10d9def00bff9e", "9355": "e12958ca0e6c5700563e236e21023c2b696489b7", "9358": "e1101089ffc7aa58be654f7d0a82840a9d5a7175", "9372": "4b82988b4dd2a033003cf247c7c8e55a71797965", "9376": "615b86b6fb3bf591289ededb8408ecbcf7059309", "9383": "66c60be3f6342e280612857cc55f9b5c2bf69558", "9384": "61eacf7beaacf842f1b8536fd3b39cf81e9c6201", "9389": "3b0bdcebd9f087d8b8497815616e53003de6ab2a", "9390": "9834b09f4fb86ad12652cf0d562d7da90c4ee1f2", "9396": "5a38ee64d5684e5cfc69f63a70b4af439efae89f", "9416": "3bf81006284a4996a151a2ea2d3143513eaee275", "9419": "ab55bb6d2cca323fb71af84521771628515ba636", "9424": "491f6c9c4c8787093f6e306d37c429167188a210", "9425": "d7b569a898f9805a32803055cfb34209c0746d9e", "9426": "f8a748cccd7722529a4c807fb6ea856218bf1c52", "9427": "532842e93c5bc4206d9d7f7fb03c2f1b767b4a68", "9428": "e0c4d0c3a631104342df3de1ff3b15407ae90bbb", "9429": "ef051adbfbd4701323c7a564ee88519e5fb2f534", "9430": "379041560e9343400e3384d1a3fce7eb068fc5d7", "9431": "3e6dfaa1e86c20e9c3a3386ae152a3e2b34020da", "9432": "542e1419fbe7229d5b423b189c3646572f71721e", "9433": "8aa177427243ddd4d860268b2354913d5564d58f", "9434": "592b41399506beaa013004510ca2a19f68ad8f85", "9435": "4adbd6c01673fcc9d13d4cd5c9089c1139257a57", "9451": "d79a2d2365bb5965e5b52cbf8a85668b1bce4a42", "9462": "74548f25dc4550d86c6a6d0095883a6950175c93", "9470": "cdb21550a902d4cc286e276ed7da8410f53af0a5", "9471": "4e0c1028c197c3576dfb6d7a82368601da5b009e", "9472": "fd4db0ba6a85ffdc2c657e1d91d2b437da30ad6a", "9473": "8990c16b3ad848f1cf98052f9a200e2cccec7124", "9480": "d0d435a8dbdb63ef33d4caa6fdced83a48c48b67", "9500": "2a739bb156044b41b5d7e47d01eb846896361e3e", "9501": "797240b9d5e9e76f49173ab517bd76fd4cb55020", "9502": "233441786ba0dcedfb14809f5a54d68aa6864c09", "9503": "1eeabc2645f2aa723526275db22b02c2041e2111", "9504": "24186c4d31052acd701c34c07c311419624bcf76", "9505": "8f384c2eeada398b69cd44b6dc9fa4037c35fb9f", "9510": "d319080ca3a6d15b165e17d9b6662e044b3487a4", "9527": "509c5b46da45560109749d56cfe8fee9c801989a", "9542": "7e6e18b6ff60f59228dc800ea68b4ca512ae8a5d", "9550": "96ba46c8be7e0602a6e20a527b899d8afe6c540a", "9558": "733b6171735cee35dcf667b92f2a692f1229c1ef", "9564": "563bf3dacb66357fbe378529e1412f6176bb71cb", "9565": "3b7e86e6f3268d1f8596b4015e37d9a4b5991ad1", "9569": "72ce35ad213e9266e0a15de1067fa56ab6c5c031", "9600": "972a8b1893b5e353b9d796b15d6fcdd022a93f00", "9627": "5eaa922e7a5f23506485fd671c03b6299f45e5c1", "9628": "66f3ac891352badc5e69b5327d2bdb5fd3a7a734", "9634": "b5cb49fc06c05d4038f75ba98c66dc30f856d303", "9677": "45c967c4b98a6b9e12eb30cd2955603f29ea6406", "9678": "3be5c98271c67ed05bf7f63cfc0cf7d2adef2495", "9695": "b567168da6cddb342fba53e475753d34438ef248", "9712": "59ea579e89c0831e647ba4a1c80c294724ee2070", "9714": "53f0b0f94baa91a4ec49b8661f5037e7156c2367", "9716": "2e05ca780a42304ee4ed1e4c969aaa6c651ef6a5", "9719": "4aeaffbb707fbd5c01c737e11ff908f2418494a9", "9731": "c9eb47e2a18891007418a0cce7c9047711e59d18", "9734": "24023716b2a804d8268fda16d8ab659594663ba0", "9754": "6d6b86202a16bff69fad3d8017aca19eed76578c", "9777": "f1a2048b30918e3c81a069ba5f0c5d2d2a398ab8", "9787": "cd72f8b831a9b9d69204d071f3a279ce99089f67", "9788": "041f02f2f431c6c1ed08735637c565aed8e18775", "9790": "4c03a2f5b6b49abeb8826832d9c05f58ba320748", "9815": "9d5520c611cb8ccfe7a35b1741b948e92475acb5", "9825": "1d5ec0210633f1bdbe7bae4c2b7014d6a3187211", "9827": "8ad702c79d1da478f53675a3bf8d9d03e727c0e2", "9840": "009ec225f0408f4e4f1366bec2c5576b61c88160", "9845": "e1f11970482f6f9ddc02c564a12dd8eea07066e1", "9848": "02f35b58f8d2d9f43b6821c7f6110f7137db73f3", "9852": "0dede258ce40c7b07f30b289b2d1e21698a27d9c", "9864": "e1d13e2d346c5f24bad35d5bf499280b43c5d5ec", "9878": "121ec06c6a873ff545307d1c70bae07c3bb5ee23", "9910": "abc90493f27ad160e311405f78d4377ac7a357ef", "9915": "d873d367fcada2441cbad7b2f5060c8dc59772bd", "9919": "ea98a62626f6eabee9b6714ec44d80856e6a0e0f", "9923": "6fa3b6d68b3c03d2ac7c50e4a94ea26992fbc1cd", "9966": "c434620547d2c7715f224a505a8d527b3b68f5a2", "9967": "4b18243de93423fb7b950d995fba9f8d4a3a8cc5", "9968": "41ff944352c1b32a75c558e0c4a93a2687e4e13c", "9974": "be41c708d85f011015e13d6e535b652d9f01c995", "9996": "f430a00eed6363774a5d537c8be4268a9b24decf", "9997": "6f51a2610308a9788a6c9bd97d3df7f31e49dfcc", "10011": "aca26d254a8c1f6920b74a9c1e4047389b3f894c", "10012": "ae4b51697134d35728f29717ba145672f828003b", "10028": "7b87dc3a6c28fe066596490d5f2c3b25c012b128", "10040": "156ca53f465242168b0923d7d0a06eda4dd2a236", "10041": "1e3f3627990353cf0d5ee00a567e563f012de624", "10069": "3e8ea8e0744f3163ddbf7b4f5f66874dd26796a7", "10104": "3621b27123ed6226a8a92bebf387d83d4bb18c9f", "10105": "18b50cd9c8427e6097e24c60050d712dac6ba61d", "10115": "aa95e39b519e0d8476c2cc1d39eb62c2bd146387", "10152": "71c7f576444940b2f29d95a799f69e719c6ac736", "10154": "977fb79c51b6a2fbdfa1c419a7bad0a97aa8d117", "10185": "4933830aec0182926088c7df78b461e1b8a47d8d", "10186": "964d40e33d2ca18e0ca713a0d79bc9ee99bf85e3", "10188": "7efc83d5af52b0fc80032fed9016dcf6f13c4ef8", "10190": "9bcf6f4c118e1ea137e8514bd60cbd1cd1972062", "10223": "62c92e11727e8770003aacf2cf7621659d66e92f", "10224": "bc2f1a54695b4fc9256a2b8d500fd65028e34110", "10248": "eb18a338936207692bbae5df71d7ddc3ed5bcc96", "10258": "9d602ec01f4b7fd28d951011c86a0ee424096a30", "10279": "0b20ae8b0518ff06466a622fa9155944ae1f19eb", "10287": "fd8b8fae015e9a493231898b23411b58d9cf430c", "10289": "aeef04b388432fe0958baa5c0ee25a325f14e0ee", "10300": "1f4e492662955e483fc98982728404149f7a1deb", "10319": "82e0d6da244b3bfa91b31dfd619ef12298910ab1", "10337": "9581bc41d8887085d4fb2c3cf9f74db11d5d3546", "10365": "ca1f5a80f6f2a5b77530123a15334f0e8d7fdebf", "10367": "d9a78a4eb1c3add937b34524b071e5ed185d924c", "10382": "e416aa7d9adb9a9c14adb0774e65162da89a0d1c", "10420": "53ccf6def40ca0e1342179269b1dfeef0e4877b4", "10440": "9740d80abd6bc3927a925c621d1ba03cade8b457", "10449": "da677897f2c4be3f0d0f0a54add678528d52ce4e", "10473": "95d19093a7ae69459eede951366a8f85f6104d76", "10522": "e7dfc961ae8fd74778eca0daeb11e5ee55e96f35", "10525": "7cb41846a8eebe1d2f46764ee5cb3a708fbeb20d", "10543": "a78307f0d99b7310707ef015cab2908ce4770a4e", "10552": "e0883c88834584b307e0ab34f4d3b7f9f724ddda", "10553": "89646b4ee29c4b99396da743e52f49910aa53161", "10560": "4102481643dd59cf40db382a190f8b35ece9b831", "10616": "9a0a6573caaa0b5471f35a1304c13d4450c5cd47", "10632": "5f513831301492ffcf054c7b57ee6092bf153c41", "10677": "60eb9d8289f79a3e5a38b788c5e25999bbe185e4", "10713": "9a5467db55584eebbbe068bac0ba273f33713a6c", "10715": "faebd3ed76af1194385a79500a1726f7bf119cb8", "10735": "e0e3462e51714f0115cf009a506a0bd352d7329a", "10741": "e01176f5849426c9ee24a0b4a9aa8b4d6a811b29", "10772": "c35a6bffaad6834ffaa0e601364ac28a1fb4c00c", "10787": "8deea98a999e20d7458f62dcd55f89e83ec9f234", "10790": "400f93cd94626ae94de0fa5ab283beac5aa3ad40", "10807": "1d4444f75abe283f62311130302e58c243840d1d", "10811": "d692fcd9e35ff3e7aca1e727f14bb99fe60c365b", "10816": "111224c3a13590075c16bbda46057d4f7f0f3425", "10822": "89db3b122fa0b8278b1811f8d20bcbaf8e0a41e0", "10837": "2d866385b6cd7906c0ab964b31f92f8f96d8ce09", "10839": "375245c10bdc922efb4e3eab5cf86c03aa0919e2", "10854": "39b6385b358a7b38d52693b2345620292a2b4297", "10863": "6df837e9dddcf43e27b983b9e66e3083cc71e9c7", "10883": "b341090aaa0bace9b946316ebf1e5bf965b026da", "10935": "a0bd19ce036a38fd91fed8b594604b5d8ee04e36", "10965": "55afb4c36328e79c1390c0f4364b2cf5c1aff481", "10990": "186cebf0aa273d60c86f35d09c99ae8883cba67f", "10992": "57e7bd47da5d27750dbcf1a53c9014ece5d445e7", "11005": "41ebfdf5b12dc1753b99c177e4e7404b6e1288f2", "11017": "0911ff3a0379356ee603ff4aa21eec3b990f9958", "11069": "8c3577f5a72bee654d94367e4bef51791ffa5d0b", "11086": "ea2e8c43b8023f07a7583878051bef41a1514550", "11091": "3a0ccb89c67b193dba3a860a77fd2952f8d2f8a9", "11093": "8d7d77f45e3de293b27217f75cf5990c1582d9ce", "11118": "abfd74814ceb7b98ef66f9351e861463b74cf845", "11119": "736a12c35e9688a5b113d5ca0c54be8d1617d36b", "11132": "8c06037ec8298e729eb7e93c82c514c54c00bcd0", "11143": "e835b5beff00bb6a5870e6b71435290408f0bc57", "11159": "ae6193e3e93093500a2253d1a82e9b286d2852a6", "11171": "3f7f5d345eb0f650bdb38d46db1091637061cf0c", "11183": "6eb8f6812883db30f200ae9b2f73fe96f2227a3b", "11192": "4365f3b07c1bf2ebcf16424b26162102954c5b90", "11211": "b468e574146f139f798b685db19740f5c3f58e95", "11212": "4f50ba73aa33d9bf052358bc41f6b21f19cbb48b", "11213": "7dc147880511389aba4149066e715290e9fafe0a", "11214": "57e753e24d4aa8abea683ea35b9d9c663014e046", "11215": "d97c3cbe23cc598559332b3558d6f4e666a24035", "11216": "9e562cd9728d32a96ea9fe3aa14d3827c9e56544", "11217": "ab30bb802d24e82f7b6404e110e4c66848cdc97f", "11218": "6a188e4219e87d7188007d5fc2669717a28c5a61", "11249": "82ca06bf38cb166db29fbc5cfbde4f368dda2b24", "11250": "ccefc034f18cd4e164e80f2c04d5462c67226c21", "11251": "dc0905f62a8888cd4f073402fe53343fc3293278", "11252": "3da643f37bec7ca28a8807f0948e2de3fce79014", "11389": "74c2c15afb21c9cc5fa35f0249d569d2648b2211", "11390": "da72d551133a8723be5a25fa52e2c0b9e3ae2125", "11398": "46e505c0805e6a6f3f0933c62731be95edd1c59f", "11402": "c761ba3538fefe5df96f28f4c0b33990a72196f0", "11431": "0d951a2e726a25c59cc2550a852eb35726dd3226", "11433": "e9e47c3853bb769b03eb9cebbb28bffc1e9e57b2", "11440": "329c3fc2f9376f1ec040addf3cc69fc969f00bca", "11472": "788f294e53ca19fdfba8cc7e2f86d0de7be82bbf", "11512": "50cd6e756336e7e0e41048e7a0d09a6af06bb841", "11515": "016f2c6e2642a68d41b68aac4545366189da25dd", "11542": "2fb1adebba30f3ec7789c4bf15f6fdf59559af80", "11555": "333bb04e3a730278aa49ff4c6db372e800f05cd6", "11586": "31929685389638232b8f22a2ee9cc63bd659f8d5", "11606": "dddb7847f8cae8ad060901268927e0b735b53b03", "11616": "343e10a257690e4312673f2a0fa4703b31b2e223", "11658": "3d952829949a5e67682fa387f9945e0b1ed6319e", "11665": "8314f7d33b08bd467f1974fdc886f60b02f226c3", "11677": "61e236d45c52030d74ba6277c0a59e8a43a13ea9", "11714": "e878e5de312ed8da0ffb36ff0e9e7e4a084556c8", "11731": "17969df7bad2fe2a9e58c744f64a8d8fefa7083d", "11795": "c8abbee6d8dc9d80bb798cd9a49b0b0b7b8c6ab7", "11812": "bce3967f672b3d75ebeb621e3bdfd2705d9c903b", "11820": "332fb83e5fc238ac3f8197b2990f90ec8b5201b6", "11821": "56cb47c93eda3574c84788ad374e0723068fcbf2", "11834": "155ae40325426025826603f221dd29dc2252d4a2", "11838": "3e56b70da3b48a523924308e1149d46fadddbb5d", "11860": "02e276fb1a52906c84d66b7b4c9b57682ddd8ffd", "11867": "3c087bb759de2e5a962b4068d0b6439e29a2600b", "11868": "3c97ae0d1babed8573d17f807b36ec3fdf94b765", "11871": "87045111fdc2110ce1df7bdac40bacc27725020e", "11893": "d266b0ba29cc9db062c4d05fddcbefc244011d2f", "11918": "75706b44a6988748d063b6f7a9d86faf04498893", "11930": "83f21dca671e67da525aa1c2043afffb633318a6", "11939": "d1c55751a8850986401e0db7cdc3e177839d4331", "11958": "575c027d4fd564254fa7dcca3032cff1b072a7a0", "11969": "8e1c4adbbee72eb8c570fe2f690ef9b1ae30c1ca", "11971": "d6df1a74c26ef455d31b19ece56af58d34340a89", "11976": "ecb863851c5fe4217059918bb8a4bc511efaae64", "11993": "90c2c8135b57d6a2fb2133e27ef3290127d3c7ae", "12004": "40a8c95572799e58976a51ad18f086e9498ed413", "12015": "d084bd67a11f835fe121c2c23956fb78aa731984", "12017": "c7a6b62d78fbf1f59e3369ed43152e8a8cc98310", "12025": "784ccc717dba2ceff7fa5233bc3cc9d4640c2464", "12031": "2e6b9608bfdbbf02133d5d1f0cd29db0cd43473b", "12061": "2550d061a3134e0002fc8ec4eb31eb3c63bcfa5b", "12116": "2f16a16aa3b9484ba37c9281e32bc80a18e5878e", "12180": "27278bbd02d4aa54d2c9bc5e21d36541e681c195", "12184": "563995c78c30a59404b37e4832f5c2a774ebba19", "12211": "3ea6e430b2820fd9d367f800d036a9c3ee87721a", "12243": "5c0eb207d2141bb4166112fe3af4fe61d0fad2fc", "12246": "a9e749c1b29bb3c278153692585f2b6a90b6a923", "12268": "3a31ef60693e09cc69c14999585b36d81d293b93", "12275": "01bbf3c8fa7ecc9c523e6299aadec83104adcd03", "12285": "e0916339b4b8239a9ac6036e9a0ab2c88bd206cb", "12297": "a3d10b001d891a0b789ce5a3ff27596f4470d6dd", "12299": "5e686178c94eca11cf7bff9143489eaffb53ef13", "12326": "22612de473319f40e028f64257fa0b297d89255b", "12347": "23074c64f5de2795756c44eb16e488d4f1d253f0", "12378": "2f0381e58328e4b2d684315fa5721a6de9945512", "12398": "ca2cbe4088f0a4f7740fa3c824f05a0abeeefe2d", "12420": "45e56e8314c278e3eb98ed7a6029b74e7435e8be", "12440": "3e6b38cb14c7deca7201b48b3a054404a0e1def8", "12450": "a8227f03300bb787118563ef94809c30e5f1e0f9", "12452": "b2b7bcbdf4e2fe4e221d5e67842c90cf317375e5", "12499": "2c5e3859b9ecaa618b634b74307579f38af472c6", "12515": "3148207b81fc11de0c1ffa901ba455ef31ceadd0", "12517": "f0899e44a4fcb150752bba93f5443df4218be7ba", "12536": "ddb354e3bb4dd7cd0be4d84c0eb89d0e4abcb2ef", "12537": "c4478d3faec44913921a947eadd571ee856864f8", "12546": "a321fa757affd24c512db1cb1db4298290a3c57f", "12548": "3df45812391c585fbc233fb3de7b5135d5a13200", "12559": "2687c401742ef081684b93cc5c493dc0805a1686", "12572": "9b88b8358c12c9c8e185d8c17e44f575dbfc7407", "12590": "108f1c25a0473d0bff6a6c2944033b9d57b6a905", "12594": "60d3d1844a8c45a81e4497b5750f1940bae26e3a", "12601": "11f343ad9959926b1e0032338e75759a7f0007a1", "12602": "08491ccbe04c503683b4e14251a1409548ef2e63", "12612": "be9380b6c1a0227433cf5a144b03043d6702691e", "12617": "542daa9035a7e8fe3354bcb1ed13f506a87f8ef2", "12638": "ecaec3fe4dff7523b6edad3072458e010ef558fc", "12648": "5e8caf0894570f9c37dda2d226033fa1514eb319", "12663": "a9543ba29083449944b34d0b77429cab12f2409a", "12677": "64a7c051f1a51ff2a89b9da9257a21cea0ef00fa", "12687": "2ee4e9da5aa3a2c1b21fc3d1897bd70e0ab2064d", "12707": "26880f0f0a4bb831fca9668650400858c34f442b", "12713": "beb5232dc7501e6bc0138036f697aa14da2a4162", "12742": "daee516f23ead8e42c2e42b7636f9ec243ab306e", "12746": "75efc315aaa118bd5f78aa20c11253f9b785f7bc", "12748": "6b0cbd6d8057906df2cf7621e926f5c8b113e798", "12771": "0aace31e5ab5999e3567ce87c053168ee0d5a2e9", "12776": "799100b33633ff7729b29c1f6943abe873b4a112", "12801": "2d14dbd71b58c534a6bf710fc6a063b4eaf33cdf", "12803": "5ac87b6e0cd731b328bd0e80d2442462c18a3145", "12835": "db2e830646cb836b9cc2f73aafb27ed0fd60b349", "12859": "9511192a67ae163339a44ffcbba4df637a52a3f1", "12861": "dca4fa882621f3841c169ed7fb0567b5d2c127bb", "12889": "934a5bed13e1f38a33fb22629c6c61e671bf0a87", "12890": "51014e435cc6188d2ebaec49cfcfd73f78eee96a", "12918": "e9d0e88ed40a810273af4cf1c742058b1a761b66", "12936": "404040598f78db05882fa5b2bba1d35fc6a30510", "12947": "456807dd5052df616fe2857eb4d5ac9dc0371f27", "12954": "6803cf6c5aa62744099803145f3ac9398389244c", "12997": "cf75dd6fe20e935c95fef57b0029382883ab0283", "13026": "b8067f531c2c63c370814248f189b75d74a0d284", "13063": "25ec58dbe1aa7988271f67c88a7499c5e0a39328", "13080": "7746207a148367edf01697d5543022315d855bf9", "13082": "222336396417c5d0ded2b461448bfbe856b4b99d", "13101": "9b115906a05f4a2311dc8f4ac1caf73f500fa10f", "13131": "d4f8e94a3ef4f3e87f87956ad518cf0a4b1e6ae2"}, "revision_to_date": {"82": 1201780717000, "104": 1219452708000, "139": 1247569053000, "152": 1268263654000, "154": 1270166496000, "170": 1272729077000, "205": 1274971759000, "256": 1278587092000, "283": 1284632442000, "289": 1284913073000, "350": 1288443967000, "381": 1289009538000, "429": 1297167036000, "483": 1301573309000, "554": 1306020417000, "604": 1315432549000, "605": 1315433712000, "609": 1315928538000, "680": 1329008993000, "698": 1329404137000, "810": 1341429339000, "964": 1368301504000, "1046": 1382055233000, "1096": 1388223959000, "1105": 1388423982000, "1122": 1388509446000, "1133": 1389822644000, "1142": 1390620955000, "1163": 1392152849000, "1188": 1396359721000, "1337": 1426589646000, "1357": 1427488168000, "1389": 1429539975000, "1482": 1433176801000, "1537": 1434412780000, "1645": 1436989891000, "1800": 1440848551000, "1834": 1441624556000, "1841": 1441737924000, "1854": 1441997103000, "1862": 1442045095000, "1863": 1442045246000, "1866": 1442049990000, "1868": 1442054103000, "1872": 1442103620000, "1876": 1442266756000, "1878": 1442381474000, "1901": 1442875738000, "1902": 1442876766000, "1906": 1442878773000, "1909": 1443066760000, "1921": 1443486804000, "1922": 1443486860000, "1926": 1443509207000, "1929": 1443558015000, "1937": 1443713146000, "1946": 1443738579000, "1949": 1443774779000, "1951": 1443816006000, "1969": 1443935853000, "1975": 1443970790000, "1979": 1444065166000, "1981": 1444066337000, "1986": 1444089083000, "1994": 1444172843000, "1998": 1444285291000, "2011": 1444449568000, "2018": 1444671518000, "2026": 1445083639000, "2028": 1445202653000, "2036": 1445266712000, "2037": 1445267989000, "2048": 1445358426000, "2049": 1445358701000, "2057": 1445409854000, "2058": 1445488015000, "2061": 1445547554000, "2062": 1445548588000, "2072": 1445813998000, "2078": 1446225814000, "2079": 1446228925000, "2082": 1446236459000, "2101": 1446576113000, "2102": 1446576494000, "2105": 1446606497000, "2108": 1446754911000, "2111": 1447091890000, "2114": 1447097967000, "2115": 1447098034000, "2117": 1447144046000, "2120": 1447261660000, "2131": 1447347881000, "2132": 1447348883000, "2136": 1447357379000, "2139": 1447393590000, "2149": 1447623752000, "2159": 1447910880000, "2161": 1447959310000, "2164": 1448307318000, "2170": 1449007159000, "2181": 1449119075000, "2193": 1449189577000, "2205": 1449232580000, "2250": 1449527495000, "2266": 1449531731000, "2269": 1449542085000, "2277": 1449601853000, "2292": 1449680734000, "2293": 1449680884000, "2295": 1449689157000, "2340": 1449882924000, "2349": 1450089122000, "2350": 1450103858000, "2352": 1450131686000, "2353": 1450133552000, "2358": 1450206992000, "2359": 1450208064000, "2361": 1450222265000, "2440": 1451903957000, "2442": 1451911528000, "2444": 1452073198000, "2453": 1452162050000, "2465": 1452198807000, "2480": 1452374289000, "2488": 1452673341000, "2495": 1452760815000, "2500": 1452882568000, "2503": 1452889163000, "2505": 1452892771000, "2508": 1452895915000, "2509": 1452897852000, "2513": 1453027038000, "2515": 1453029329000, "2583": 1453042236000, "2591": 1453196084000, "2598": 1453210983000, "2601": 1453219384000, "2607": 1453230048000, "2609": 1453234865000, "2619": 1453244868000, "2622": 1453293532000, "2633": 1453376942000, "2636": 1453406176000, "2643": 1453473989000, "2647": 1453475378000, "2649": 1453480125000, "2656": 1453502135000, "2677": 1453720272000, "2686": 1453810371000, "2687": 1453811418000, "2695": 1453876181000, "2696": 1453894552000, "2698": 1453905275000, "2700": 1453908353000, "2707": 1453978533000, "2712": 1454059520000, "2715": 1454066093000, "2723": 1454104552000, "2741": 1454325702000, "2743": 1454336016000, "2744": 1454337527000, "2752": 1454357605000, "2768": 1454494191000, "2776": 1454666715000, "2782": 1454777100000, "2784": 1454784372000, "2798": 1454846852000, "2806": 1454962182000, "2808": 1454965390000, "2811": 1455014150000, "2823": 1455145834000, "2828": 1455204196000, "2844": 1455225073000, "2848": 1455279146000, "2851": 1455300380000, "2860": 1455461805000, "2862": 1455480327000, "2867": 1455529957000, "2882": 1455894447000, "2892": 1456183302000, "2896": 1456259017000, "2912": 1456515503000, "2919": 1456585421000, "2921": 1456594127000, "2925": 1456666141000, "2950": 1456738313000, "2952": 1456807961000, "2955": 1456848096000, "2973": 1457339430000, "2985": 1457472400000, "2993": 1457686795000, "2998": 1457857979000, "3010": 1458129668000, "3022": 1458316583000, "3027": 1458425021000, "3035": 1458467283000, "3038": 1458490678000, "3040": 1458542293000, "3047": 1458580272000, "3049": 1458586393000, "3066": 1459106269000, "3070": 1459136471000, "3089": 1459456590000, "3094": 1459611888000, "3155": 1460069188000, "3159": 1460145885000, "3179": 1460569510000, "3194": 1460964555000, "3195": 1460964681000, "3199": 1461022783000, "3202": 1461040235000, "3211": 1461292240000, "3212": 1461305410000, "3218": 1461519419000, "3221": 1461564898000, "3222": 1461565432000, "3226": 1461967013000, "3236": 1462456149000, "3239": 1462561375000, "3246": 1462781647000, "3259": 1463147863000, "3263": 1463325047000, "3265": 1463343595000, "3286": 1463984114000, "3290": 1464083737000, "3312": 1465161746000, "3317": 1465248049000, "3319": 1465820518000, "3329": 1467276554000, "3393": 1467851695000, "3465": 1468255092000, "3486": 1469007691000, "3490": 1469051421000, "3499": 1469185894000, "3501": 1469203680000, "3510": 1469470621000, "3556": 1469830265000, "3585": 1470126869000, "3593": 1470225304000, "3658": 1471124084000, "3731": 1471194091000, "3761": 1471432855000, "3764": 1471437174000, "3790": 1471682488000, "3797": 1471898267000, "3801": 1471949171000, "3806": 1472047354000, "3811": 1472129808000, "3988": 1474615724000, "3996": 1474635053000, "4106": 1476262567000, "4287": 1478247585000, "4290": 1478516896000, "4298": 1478873054000, "4309": 1479154412000, "4324": 1479594540000, "4344": 1480415610000, "4347": 1480416223000, "4348": 1480428226000, "4360": 1480509461000, "4372": 1480686055000, "4383": 1480918957000, "4387": 1481059805000, "4390": 1481142802000, "4432": 1482373531000, "4433": 1482506739000, "4434": 1482506875000, "4435": 1482518033000, "4439": 1482703264000, "4448": 1483051148000, "4455": 1483439972000, "4460": 1483535700000, "4463": 1483809413000, "4482": 1484060278000, "4505": 1484258314000, "4508": 1484372406000, "4525": 1484492853000, "4526": 1484493092000, "4528": 1484546719000, "4539": 1484741064000, "4550": 1484843991000, "4561": 1484897052000, "4595": 1485437487000, "4633": 1485678414000, "4646": 1485814126000, "4710": 1486192950000, "4715": 1486479422000, "4737": 1486734902000, "4766": 1487036484000, "4770": 1487088986000, "4779": 1487366689000, "4785": 1487842314000, "4793": 1488035266000, "4884": 1489620343000, "4889": 1489686742000, "4904": 1490248893000, "4905": 1490249019000, "5063": 1491806560000, "5066": 1491835426000, "5071": 1491861800000, "5106": 1492465297000, "5190": 1493969358000, "5197": 1494186159000, "5263": 1495375738000, "5270": 1495601286000, "5287": 1495788578000, "5323": 1496522184000, "5325": 1496553813000, "5340": 1497389364000, "5344": 1497398618000, "5346": 1497399372000, "5480": 1498140544000, "5498": 1498301788000, "5542": 1498558564000, "5610": 1499110816000, "5717": 1499513875000, "5722": 1499580917000, "5725": 1499590711000, "5816": 1500024907000, "5854": 1500389822000, "5892": 1500496404000, "5920": 1500702090000, "6025": 1501633259000, "6075": 1501929305000, "6082": 1501961625000, "6097": 1502173813000, "6098": 1502175408000, "6118": 1502345536000, "6121": 1502476033000, "6122": 1502476117000, "6145": 1502776628000, "6146": 1502776847000, "6147": 1502777228000, "6267": 1503661938000, "6279": 1503846474000, "6326": 1504655244000, "6331": 1504701282000, "6348": 1505240035000, "6351": 1505304122000, "6363": 1505743125000, "6392": 1507183402000, "6405": 1507832513000, "6409": 1508278658000, "6413": 1508625283000, "6479": 1511010257000, "6494": 1511472473000, "6504": 1511802087000, "6510": 1512502224000, "6540": 1512656411000, "6558": 1512998376000, "6560": 1512998620000, "6567": 1513170797000, "6568": 1513170824000, "6652": 1516578814000, "6680": 1516881817000, "6685": 1517253869000, "6687": 1517320681000, "6702": 1517492889000, "6703": 1517492915000, "6704": 1517548649000, "6705": 1517572776000, "6706": 1517572860000, "6715": 1516639117000, "6716": 1516640805000, "6717": 1516987986000, "6718": 1517501563000, "6719": 1517571617000, "6720": 1517572011000, "6721": 1517578967000, "6722": 1517659066000, "6735": 1517962261000, "6736": 1517964764000, "6738": 1518020406000, "6847": 1520268121000, "6903": 1520545429000, "6988": 1521006039000, "7013": 1521397688000, "7034": 1521670615000, "7041": 1521785073000, "7071": 1522275906000, "7079": 1522912545000, "7103": 1523460814000, "7132": 1524118179000, "7138": 1524419705000, "7177": 1525395361000, "7179": 1525508947000, "7192": 1525704847000, "7282": 1527278119000, "7310": 1528890405000, "7315": 1529094189000, "7357": 1529763393000, "7363": 1529774610000, "7411": 1529741772000, "7419": 1528823671000, "7420": 1530095817000, "7421": 1530122428000, "7424": 1530129901000, "7441": 1530297090000, "7450": 1530358774000, "7498": 1530556582000, "7510": 1530731688000, "7515": 1530783758000, "7525": 1530897121000, "7540": 1530957155000, "7567": 1531331386000, "7572": 1531347634000, "7576": 1530990756000, "7577": 1516575460000, "7590": 1531416485000, "7593": 1531424368000, "7594": 1531425109000, "7605": 1531439125000, "7622": 1531838807000, "7632": 1531848348000, "7633": 1531857623000, "7636": 1531866687000, "7660": 1532016226000, "7707": 1532352194000, "7730": 1532497582000, "7741": 1532697025000, "7785": 1532883338000, "7801": 1532900224000, "7808": 1533242201000, "7827": 1533388522000, "7848": 1533487809000, "7851": 1533490432000, "7855": 1533498311000, "7857": 1533498569000, "7912": 1533561920000, "7919": 1533568466000, "7930": 1533586971000, "7940": 1533645015000, "7945": 1533678243000, "8007": 1533745943000, "8025": 1533920335000, "8028": 1533932770000, "8067": 1534146822000, "8072": 1534167738000, "8073": 1534167809000, "8090": 1534255980000, "8095": 1534036880000, "8105": 1534279531000, "8110": 1534290615000, "8121": 1534338404000, "8127": 1534442889000, "8131": 1534607309000, "8139": 1534780584000, "8144": 1534803427000, "8151": 1535184513000, "8154": 1535367797000, "8161": 1535694648000, "8171": 1536332194000, "8183": 1536610203000, "8191": 1536692347000, "8193": 1536705123000, "8201": 1536768901000, "8203": 1536772132000, "8216": 1536851377000, "8218": 1536855573000, "8225": 1537543357000, "8228": 1537553751000, "8240": 1538239864000, "8253": 1538966275000, "8257": 1539043989000, "8258": 1539044007000, "8267": 1539114837000, "8268": 1539125577000, "8272": 1539356513000, "8278": 1539440400000, "8279": 1539620789000, "8280": 1539675322000, "8281": 1539701403000, "8285": 1539963131000, "8286": 1539975548000, "8294": 1540339382000, "8311": 1540466054000, "8316": 1540560530000, "8320": 1540583430000, "8328": 1540931728000, "8335": 1541441812000, "8339": 1541446943000, "8346": 1541518721000, "8348": 1541446221000, "8349": 1541449227000, "8350": 1541449438000, "8351": 1541518507000, "8352": 1541518606000, "8353": 1541519921000, "8360": 1541715356000, "8365": 1541799870000, "8372": 1542323608000, "8375": 1542829979000, "8389": 1543786629000, "8399": 1543930578000, "8402": 1543930865000, "8405": 1543931047000, "8410": 1543967409000, "8417": 1544106564000, "8422": 1544133274000, "8427": 1544474255000, "8445": 1547167903000, "8456": 1547332188000, "8462": 1547487585000, "8476": 1548251220000, "8493": 1548348768000, "8495": 1548353344000, "8498": 1548530753000, "8503": 1548677194000, "8505": 1548356736000, "8520": 1549065028000, "8535": 1549590554000, "8556": 1549911826000, "8563": 1550078009000, "8572": 1550089410000, "8579": 1550174764000, "8582": 1550251896000, "8595": 1542531902000, "8596": 1543417573000, "8597": 1547626770000, "8598": 1547629285000, "8599": 1550421801000, "8602": 1550490373000, "8618": 1548947778000, "8619": 1549031736000, "8620": 1549290232000, "8621": 1549295323000, "8622": 1549380947000, "8623": 1549461069000, "8624": 1550567383000, "8625": 1550520841000, "8626": 1550522329000, "8627": 1550575693000, "8628": 1550580322000, "8629": 1550603952000, "8630": 1550619846000, "8631": 1550620110000, "8637": 1550908301000, "8638": 1550908628000, "8639": 1551070112000, "8645": 1551396442000, "8655": 1551423100000, "8656": 1551423781000, "8657": 1551424461000, "8658": 1551492915000, "8659": 1551753724000, "8660": 1551772352000, "8661": 1551851815000, "8662": 1551852025000, "8663": 1551880120000, "8721": 1554255051000, "8732": 1554316775000, "8739": 1554487341000, "8743": 1554513138000, "8745": 1554521547000, "8746": 1554487917000, "8756": 1554833319000, "8762": 1554946723000, "8763": 1555022559000, "8764": 1554967344000, "8765": 1555022944000, "8777": 1555513234000, "8783": 1555612345000, "8788": 1555583606000, "8789": 1555736808000, "8790": 1555769084000, "8791": 1555837313000, "8794": 1556496564000, "8805": 1556963223000, "8809": 1557262285000, "8818": 1557477869000, "8844": 1561036771000, "8863": 1561969481000, "8872": 1562167323000, "8873": 1562168909000, "8878": 1562229397000, "8886": 1562413434000, "8898": 1562596492000, "8905": 1562666286000, "8948": 1562756289000, "8955": 1562775014000, "9021": 1563360023000, "9030": 1563919086000, "9041": 1564774713000, "9047": 1564796517000, "9074": 1565181746000, "9081": 1565198655000, "9086": 1565222882000, "9088": 1565223242000, "9093": 1565345024000, "9108": 1565617430000, "9113": 1565673058000, "9128": 1566214582000, "9133": 1566258655000, "9135": 1566294210000, "9153": 1567025222000, "9157": 1567026117000, "9161": 1567025618000, "9162": 1567025737000, "9163": 1567028976000, "9168": 1567615880000, "9169": 1567622571000, "9174": 1567620325000, "9176": 1567703043000, "9181": 1567702925000, "9182": 1567704036000, "9195": 1569448970000, "9206": 1569501098000, "9209": 1569911898000, "9214": 1570086630000, "9219": 1570122166000, "9226": 1571108944000, "9230": 1571329511000, "9250": 1572146000000, "9251": 1572146207000, "9256": 1572223753000, "9257": 1572224325000, "9258": 1572224927000, "9259": 1572004894000, "9260": 1572010592000, "9270": 1572380732000, "9289": 1572409281000, "9290": 1572409315000, "9291": 1572409361000, "9292": 1572409407000, "9293": 1572409436000, "9294": 1572410337000, "9318": 1572421156000, "9319": 1572477688000, "9320": 1572477827000, "9321": 1572576862000, "9322": 1572631219000, "9329": 1572992324000, "9342": 1572300299000, "9343": 1572300729000, "9344": 1572303148000, "9345": 1572310099000, "9346": 1572388686000, "9347": 1572474402000, "9351": 1573052384000, "9352": 1573052633000, "9355": 1573146093000, "9358": 1573209193000, "9372": 1573749860000, "9376": 1573865341000, "9383": 1573861183000, "9384": 1573861378000, "9389": 1574107890000, "9390": 1574109150000, "9396": 1574466875000, "9416": 1576321584000, "9419": 1576356030000, "9424": 1575220027000, "9425": 1575915019000, "9426": 1575916928000, "9427": 1575964720000, "9428": 1576099994000, "9429": 1576102139000, "9430": 1576102384000, "9431": 1576102565000, "9432": 1576137307000, "9433": 1576137500000, "9434": 1576402465000, "9435": 1576406127000, "9451": 1577300855000, "9462": 1578067196000, "9470": 1578131233000, "9471": 1578135009000, "9472": 1578136320000, "9473": 1578139790000, "9480": 1578528132000, "9500": 1577960667000, "9501": 1577989462000, "9502": 1577992341000, "9503": 1578001230000, "9504": 1578056692000, "9505": 1578061331000, "9510": 1579049515000, "9527": 1579257492000, "9542": 1579274611000, "9550": 1579280903000, "9558": 1579388157000, "9564": 1579462220000, "9565": 1579462744000, "9569": 1579538242000, "9600": 1579605112000, "9627": 1579764755000, "9628": 1579744749000, "9634": 1579780792000, "9677": 1580135349000, "9678": 1580135562000, "9695": 1580291762000, "9712": 1580379609000, "9714": 1580379673000, "9716": 1580379768000, "9719": 1580379967000, "9731": 1580424980000, "9734": 1580445588000, "9754": 1580518665000, "9777": 1580777225000, "9787": 1580820035000, "9788": 1580820073000, "9790": 1580820172000, "9815": 1580838474000, "9825": 1580896231000, "9827": 1580896284000, "9840": 1580947109000, "9845": 1581010745000, "9848": 1581015867000, "9852": 1581072298000, "9864": 1581222534000, "9878": 1581258084000, "9910": 1581425357000, "9915": 1581504141000, "9919": 1581579780000, "9923": 1581581613000, "9966": 1581755952000, "9967": 1581756002000, "9968": 1581756046000, "9974": 1581758162000, "9996": 1581810628000, "9997": 1581810677000, "10011": 1581862078000, "10012": 1581862659000, "10028": 1581968151000, "10040": 1582011220000, "10041": 1582012728000, "10069": 1582034198000, "10104": 1582712479000, "10105": 1582712649000, "10115": 1582750033000, "10152": 1582928954000, "10154": 1582939049000, "10185": 1583012911000, "10186": 1583014011000, "10188": 1583014302000, "10190": 1583015246000, "10223": 1583196437000, "10224": 1583197922000, "10248": 1583282216000, "10258": 1583295743000, "10279": 1583367563000, "10287": 1583405596000, "10289": 1583405753000, "10300": 1583432250000, "10319": 1583602310000, "10337": 1583753230000, "10365": 1583804403000, "10367": 1583804715000, "10382": 1583840835000, "10420": 1584008773000, "10440": 1584040075000, "10449": 1584094159000, "10473": 1584179454000, "10522": 1584354219000, "10525": 1584394984000, "10543": 1584610019000, "10552": 1584640116000, "10553": 1584640608000, "10560": 1584699484000, "10616": 1584833055000, "10632": 1584899067000, "10677": 1585431954000, "10713": 1585521876000, "10715": 1585551257000, "10735": 1586405450000, "10741": 1586524019000, "10772": 1587021963000, "10787": 1587514075000, "10790": 1587535570000, "10807": 1588741711000, "10811": 1589292800000, "10816": 1589451633000, "10822": 1589526751000, "10837": 1589563777000, "10839": 1589578165000, "10854": 1589778967000, "10863": 1589834751000, "10883": 1589893324000, "10935": 1590195019000, "10965": 1590528273000, "10990": 1590677555000, "10992": 1590684946000, "11005": 1590793283000, "11017": 1591000490000, "11069": 1591177328000, "11086": 1591344542000, "11091": 1591352308000, "11093": 1591353193000, "11118": 1591447711000, "11119": 1591448028000, "11132": 1591455418000, "11143": 1591495470000, "11159": 1591613331000, "11171": 1591647631000, "11183": 1591735504000, "11192": 1591777205000, "11211": 1591685420000, "11212": 1591776359000, "11213": 1591780121000, "11214": 1591780219000, "11215": 1591780300000, "11216": 1591781538000, "11217": 1591781921000, "11218": 1591783879000, "11249": 1591825844000, "11250": 1591826170000, "11251": 1591826669000, "11252": 1591827967000, "11389": 1592205132000, "11390": 1592205218000, "11398": 1592219775000, "11402": 1592221761000, "11431": 1592286689000, "11433": 1592286768000, "11440": 1592370684000, "11472": 1592484312000, "11512": 1592579500000, "11515": 1592637156000, "11542": 1592745228000, "11555": 1592841020000, "11586": 1593040670000, "11606": 1593175105000, "11616": 1593212835000, "11658": 1593563046000, "11665": 1593623073000, "11677": 1593710203000, "11714": 1593819755000, "11731": 1593943925000, "11795": 1594140396000, "11812": 1594218772000, "11820": 1594168529000, "11821": 1594169128000, "11834": 1594345889000, "11838": 1594352754000, "11860": 1594425424000, "11867": 1594482131000, "11868": 1594482198000, "11871": 1594516708000, "11893": 1594542427000, "11918": 1594708211000, "11930": 1594743109000, "11939": 1594759153000, "11958": 1594825382000, "11969": 1594879279000, "11971": 1594887520000, "11976": 1594895073000, "11993": 1594966008000, "12004": 1595054964000, "12015": 1595122131000, "12017": 1595153401000, "12025": 1595169992000, "12031": 1595180337000, "12061": 1595332971000, "12116": 1595984737000, "12180": 1596838739000, "12184": 1596847241000, "12211": 1597069092000, "12243": 1597193823000, "12246": 1597218298000, "12268": 1597232734000, "12275": 1597273810000, "12285": 1597326624000, "12297": 1597395253000, "12299": 1597395871000, "12326": 1597444920000, "12347": 1597656038000, "12378": 1598034702000, "12398": 1598185898000, "12420": 1598362533000, "12440": 1598549457000, "12450": 1598631861000, "12452": 1598668568000, "12499": 1599526551000, "12515": 1599694304000, "12517": 1599398087000, "12536": 1600186603000, "12537": 1600389419000, "12546": 1600821758000, "12548": 1600855136000, "12559": 1601258604000, "12572": 1601469270000, "12590": 1601503262000, "12594": 1601523515000, "12601": 1601539921000, "12602": 1601540378000, "12612": 1601622571000, "12617": 1601680463000, "12638": 1601942510000, "12648": 1602009144000, "12663": 1602348631000, "12677": 1602679196000, "12687": 1602770152000, "12707": 1602889606000, "12713": 1603013715000, "12742": 1603119467000, "12746": 1603132499000, "12748": 1603165529000, "12771": 1603293741000, "12776": 1603355082000, "12801": 1603498940000, "12803": 1603485651000, "12835": 1603755613000, "12859": 1604049748000, "12861": 1604087421000, "12889": 1604942822000, "12890": 1604943025000, "12918": 1605508725000, "12936": 1605754667000, "12947": 1605816225000, "12954": 1605895505000, "12997": 1606935399000, "13026": 1607216075000, "13063": 1607447622000, "13080": 1607562135000, "13082": 1607564775000, "13101": 1607820291000, "13131": 1608065441000}, "params": {"Cython": ["", "0.27"], "MDAnalysisTests": ["", null], "arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i9-7900X CPU @ 3.30GHz", "Intel(R) Xeon(R) CPU E3-1226 v3 @ 3.30GHz"], "machine": ["c3potato", "gp160"], "mock": ["", null], "nose": ["", null], "numpy": [""], "os": ["Linux 3.16.0-4-amd64", "Linux 4.10.0-35-generic"], "psutil": ["", null], "pytest": ["", null], "python": ["2.7", "3.6"], "ram": ["128GB", "16GB"], "scipy": [""], "six": ["", null], "mdanalysistests": ["", null], "branch": ["develop"]}, "graph_param_list": [{"Cython": "", "MDAnalysisTests": "", "arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E3-1226 v3 @ 3.30GHz", "machine": "c3potato", "mock": "", "nose": "", "numpy": "", "os": "Linux 3.16.0-4-amd64", "psutil": "", "pytest": "", "python": "2.7", "ram": "16GB", "scipy": "", "six": "", "branch": "develop", "mdanalysistests": null}, {"Cython": "0.27", "arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E3-1226 v3 @ 3.30GHz", "machine": "c3potato", "mdanalysistests": "", "numpy": "", "os": "Linux 3.16.0-4-amd64", "python": "2.7", "ram": "16GB", "scipy": "", "branch": "develop", "MDAnalysisTests": null, "mock": null, "nose": null, "psutil": null, "pytest": null, "six": null}, {"Cython": "", "arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E3-1226 v3 @ 3.30GHz", "machine": "c3potato", "mdanalysistests": "", "numpy": "", "os": "Linux 3.16.0-4-amd64", "python": "2.7", "ram": "16GB", "scipy": "", "branch": "develop", "MDAnalysisTests": null, "mock": null, "nose": null, "psutil": null, "pytest": null, "six": null}, {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E3-1226 v3 @ 3.30GHz", "machine": "c3potato", "os": "Linux 3.16.0-4-amd64", "ram": "16GB", "python": "3.6", "Cython": "", "mdanalysistests": "", "numpy": "", "scipy": "", "branch": "develop", "MDAnalysisTests": null, "mock": null, "nose": null, "psutil": null, "pytest": null, "six": null}], "benchmarks": {"GRO.GROReadBench.time_create_GRO_universe": {"code": "class GROReadBench:\n    def time_create_GRO_universe(self):\n        \"\"\"Time to create MDA Universe of GRO\"\"\"\n        u = mda.Universe(GRO)", "min_run_count": 2, "name": "GRO.GROReadBench.time_create_GRO_universe", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "85e9386a1154d866631322425b43e682903a28a89efb74527110189dcbd24a4a", "warmup_time": -1}, "GRO.GROReadBench.time_parse_GRO_file": {"code": "class GROReadBench:\n    def time_parse_GRO_file(self):\n        \"\"\"Time to create topology from GRO file\"\"\"\n        p = GROParser(GRO)\n        top = p.parse()", "min_run_count": 2, "name": "GRO.GROReadBench.time_parse_GRO_file", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7d0bec284a3cc88727c887e20b4d7a7a6fb3dc8b9a3fed98a8bee728f5920227", "warmup_time": -1}, "GRO.GROReadBench.time_read_GRO_coordinates": {"code": "class GROReadBench:\n    def time_read_GRO_coordinates(self):\n        \"\"\"Benchmark reading of standard testsuite GRO file.\"\"\"\n        GROReader(GRO)", "min_run_count": 2, "name": "GRO.GROReadBench.time_read_GRO_coordinates", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "987e7a4b2431ce8645e1a4d7c1135f76c9b35e5eb29b0f6818860f96531be147", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_angle": {"code": "class AtomGroupAttrsBench:\n    def time_angle(self, num_atoms):\n        \"\"\"Benchmark simple angle\n        calculation. Requires ag\n        with three atoms.\n        \"\"\"\n        self.ag[:3].angle\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_angle", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a83a2ce99c0673f57ac3eac16b49a9db026ae64b6fcaa4389bf47eed59124dbb", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_atomcount": {"code": "class AtomGroupAttrsBench:\n    def time_atomcount(self, num_atoms):\n        \"\"\"Benchmark counting of atoms in\n        atomgroup.\n        \"\"\"\n        self.ag.n_atoms\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_atomcount", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d31f8341e31a7bc198133f258c72536b54ec904f97ac4f28a767f9970856818a", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_atoms": {"code": "class AtomGroupAttrsBench:\n    def time_atoms(self, num_atoms):\n        \"\"\"Benchmark returning of identical\n        atomgroup.\n        \"\"\"\n        self.ag.atoms\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_atoms", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6cd2f945901dc324d1dabcb388bc3fe0c3b5977d49056e5d7a7859c40e2c9af8", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_bond": {"code": "class AtomGroupAttrsBench:\n    def time_bond(self, num_atoms):\n        \"\"\"Benchmark Bond object creation.\n        Requires ag of size 2.\n        \"\"\"\n        self.ag[:2].bond\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_bond", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3507b8355b5b01697e086a646c559412d09fde51fc7139f4524f7cb58aa7ae67", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_dihedral": {"code": "class AtomGroupAttrsBench:\n    def time_dihedral(self, num_atoms):\n        \"\"\"Benchmark Dihedral object\n        creation time. Requires ag of\n        size 4.\n        \"\"\"\n        self.ag[:4].dihedral\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_dihedral", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5775f1a2f7666febcc47f94b77702bd75a2a7ccd7c9044265c965dbad779a351", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_forces": {"code": "class AtomGroupAttrsBench:\n    def time_forces(self, num_atoms):\n        \"\"\"Benchmark atomgroup force\n        calculation.\n        \"\"\"\n        try:\n            self.ag.forces\n        except NoDataError:\n            pass\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_forces", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0186fc73e76b8e3f8cb39e7e11f7c6e9837d800b2379b14591432ee9e710d69e", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_improper": {"code": "class AtomGroupAttrsBench:\n    def time_improper(self, num_atoms):\n        \"\"\"Benchmark improper dihedral\n        calculation. Requires ag of size\n        4.\n        \"\"\"\n        self.ag[:4].improper\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_improper", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d7ba217b21841225ff1df0b473d66794db6b2c92c56bbb3cb04c042fb43e967c", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_indices": {"code": "class AtomGroupAttrsBench:\n    def time_indices(self, num_atoms):\n        \"\"\"Benchmark atom index calculation.\n        \"\"\"\n        self.ag.ix\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_indices", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8a27cd7f019ca3f35aa37d112e72f6b0311c37dee14a33adff3dffd8b6ee2602", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_positions": {"code": "class AtomGroupAttrsBench:\n    def time_positions(self, num_atoms):\n        \"\"\"Benchmark returning the positions\n        of the atoms in the group.\n        \"\"\"\n        self.ag.positions\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_positions", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7f538e5ccf7c68b715cb9ba1f0a85764faa5e09216ba83be3b88804f26504dcd", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_residuecount": {"code": "class AtomGroupAttrsBench:\n    def time_residuecount(self, num_atoms):\n        \"\"\"Benchmark counting of residues in\n        atomgroup.\n        \"\"\"\n        self.ag.n_residues\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_residuecount", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6ba8023af1d40da84022b2eba1e494b20eb80d1257fa5beabc2206f8d380b237", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_residues": {"code": "class AtomGroupAttrsBench:\n    def time_residues(self, num_atoms):\n        \"\"\"Benchmark creation of the ResidueGroup\n        from the AtomGroup.\n        \"\"\"\n        self.ag.residues\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_residues", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "72655f2bf91db254ada1b26646da826894a223384a4691f99b06b291107b938e", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_segmentcount": {"code": "class AtomGroupAttrsBench:\n    def time_segmentcount(self, num_atoms):\n        \"\"\"Benchmark counting of segments in\n        atomgroup.\n        \"\"\"\n        self.ag.n_segments\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_segmentcount", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ea9ccc59b78a3786c8ed142a014c476162b2d37437c8f93a4b05644dd851aede", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_segments": {"code": "class AtomGroupAttrsBench:\n    def time_segments(self, num_atoms):\n        \"\"\"Benchmark determination of sorted\n        SegmentGroup from AtomGroup.\n        \"\"\"\n        self.ag.segments\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_segments", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ec21432839b2caac695337844d8b3feff546e74083cc61d846692523160bcf70", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_ts": {"code": "class AtomGroupAttrsBench:\n    def time_ts(self, num_atoms):\n        \"\"\"Benchmark returning of a timestep\n        instance from atomgroup.\n        \"\"\"\n        self.ag.ts\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_ts", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0aadba3b29a020c1edbc55253049c8f9dc252759321e51f110ca895d99ce52a6", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_unique": {"code": "class AtomGroupAttrsBench:\n    def time_unique(self, num_atoms):\n        \"\"\"Benchmark determination of unique\n        elements in atomgroup.\n        \"\"\"\n        self.ag.unique\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_unique", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1c2345530d78545ab7011e17420325ec0f2b12a472ade667a7253fd672a06f70", "warmup_time": -1}, "ag_methods.AtomGroupAttrsBench.time_velocity": {"code": "class AtomGroupAttrsBench:\n    def time_velocity(self, num_atoms):\n        \"\"\"Benchmark atomgroup velocity\n        values return.\n        \"\"\"\n        try:\n            self.ag.velocities\n        except NoDataError:\n            pass\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]", "min_run_count": 2, "name": "ag_methods.AtomGroupAttrsBench.time_velocity", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3841e8cfb0518bdc257c0479f3844b8bdf80ee1e2bf7b2245ba4ba95533e2ce8", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_bbox_no_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_bbox_no_pbc(self, num_atoms):\n        \"\"\"Benchmark bounding box calculation\n        with pbc inactive.\n        \"\"\"\n        self.ag.bbox(pbc=False)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_bbox_no_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f4d3c92e8dc5efa1a09726e3c1dea49453d5625ee6952475869546919575a0ed", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_bbox_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_bbox_pbc(self, num_atoms):\n        \"\"\"Benchmark bounding box calculation\n        with pbc active.\n        \"\"\"\n        self.ag.bbox(pbc=True)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_bbox_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "02deed74348541e19fd7811f9aa232bd53410903de3a1432d7cc090a3184198e", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_bsphere_no_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_bsphere_no_pbc(self, num_atoms):\n        \"\"\"Benchmark bounding sphere calculation\n        with pbc inactive.\n        \"\"\"\n        self.ag.bsphere(pbc=False)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_bsphere_no_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7f229e23767623d3052357b0d2e36620742990cbec01fa9df982997a64d0b558", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_bsphere_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_bsphere_pbc(self, num_atoms):\n        \"\"\"Benchmark bounding sphere calculation\n        with pbc active.\n        \"\"\"\n        self.ag.bsphere(pbc=True)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_bsphere_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "669f068c60e5023f28ea98225386244efdd0907ea6895c590088cfd170bef050", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_center_no_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_center_no_pbc(self, num_atoms):\n        \"\"\"Benchmark center calculation with\n        pbc inactive.\n        \"\"\"\n        self.ag.center(weights=self.weights,\n                       pbc=False)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_center_no_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5499bbde1d376804c4c410b7cac45ebc709dc4065d374891ccaca4c67b497d8d", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_center_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_center_pbc(self, num_atoms):\n        \"\"\"Benchmark center calculation with\n        pbc active.\n        \"\"\"\n        self.ag.center(weights=self.weights,\n                       pbc=True)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_center_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9e281b5399aef60e0a823b2a228dee94c0e31bd95d8806c1e15b861cf23d83b6", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_centroid_no_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_centroid_no_pbc(self, num_atoms):\n        \"\"\"Benchmark centroid calculation with\n        pbc inactive.\n        \"\"\"\n        self.ag.centroid(pbc=False)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_centroid_no_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "56366be992afa8468328495085d4bd7f270fe821af6b4412e097e071a5841aba", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_centroid_pbc": {"code": "class AtomGroupMethodsBench:\n    def time_centroid_pbc(self, num_atoms):\n        \"\"\"Benchmark centroid calculation with\n        pbc active.\n        \"\"\"\n        self.ag.centroid(pbc=True)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_centroid_pbc", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7ce43af0540e7c4b35689a263dfc228d0a4a2d2d92727d2d44b1e397c32a8726", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_concatenate": {"code": "class AtomGroupMethodsBench:\n    def time_concatenate(self, num_atoms):\n        \"\"\"Benchmark atomgroup concatenation.\n        \"\"\"\n        self.ag.concatenate(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_concatenate", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d5249c87dfce2c91bde201106b2e4198849051c93364564de86ce872159c1428", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_difference": {"code": "class AtomGroupMethodsBench:\n    def time_difference(self, num_atoms):\n        \"\"\"Benchmark atomgroup difference\n        operation.\n        \"\"\"\n        self.ag.difference(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_difference", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "56ce3f2f2c4257dee720e7b07315ce2595afc66137f7324b405ebfb060e65dd3", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_groupby": {"code": "class AtomGroupMethodsBench:\n    def time_groupby(self, num_atoms):\n        \"\"\"Benchmark atomgroup groupby\n        operation.\n        \"\"\"\n        self.ag.groupby('resnames')\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_groupby", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e42dfd364b2726e568511c4eae084feead8bd62e3ac3d2046ca6c0ae2a061363", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_guess_bonds": {"code": "class AtomGroupMethodsBench:\n    def time_guess_bonds(self, num_atoms):\n        \"\"\"Benchmark atomgroup bond guessing\n        with artificially-seeded vdw values.\n        \"\"\"\n        self.ag.guess_bonds(self.vdwradii)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_guess_bonds", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b22111561b487e88b079412e82b48de4d70d39b0c868ec64305cebdcdf3ecd0b", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_intersection": {"code": "class AtomGroupMethodsBench:\n    def time_intersection(self, num_atoms):\n        \"\"\"Benchmark ag intersection.\n        \"\"\"\n        self.ag.intersection(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_intersection", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "af81d67c8ba6789db6632156d5ee37d16c1d7145bc51d97faf62f5a44e71a216", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_is_strict_subset": {"code": "class AtomGroupMethodsBench:\n    def time_is_strict_subset(self, num_atoms):\n        \"\"\"Benchmark ag strict subset operation.\n        \"\"\"\n        self.ag.is_strict_subset(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_is_strict_subset", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4dff2b0102568196662f408ec7682e479b1f28f3c0811e1d09928f67803ff1fd", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_is_strict_superset": {"code": "class AtomGroupMethodsBench:\n    def time_is_strict_superset(self, num_atoms):\n        \"\"\"Benchmark ag strict superset operation.\n        \"\"\"\n        self.ag.is_strict_superset(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_is_strict_superset", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2c81f4e274971df7fb627c5c8e82a821572d65175a56f86824b9a5d644170653", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_isdisjoint": {"code": "class AtomGroupMethodsBench:\n    def time_isdisjoint(self, num_atoms):\n        \"\"\"Benchmark disjoint operation between\n        atomgroups.\n        \"\"\"\n        self.ag.isdisjoint(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_isdisjoint", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9573a798d7d80b64066ae7114626b83b763312b43c4435eac392b8c0d3fb8a08", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_issubset": {"code": "class AtomGroupMethodsBench:\n    def time_issubset(self, num_atoms):\n        \"\"\"Benchmark subset operation between\n        atomgroups.\n        \"\"\"\n        self.ag.issubset(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_issubset", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f6bd03304591ed1af9f0654198f07148f408505a8ba8d1ec24c4613d5980686b", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_issuperset": {"code": "class AtomGroupMethodsBench:\n    def time_issuperset(self, num_atoms):\n        \"\"\"Benchmark superset operation between\n        atomgroups.\n        \"\"\"\n        self.ag.issuperset(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_issuperset", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "da0c4343c5544f68e3ee19e45eb427df5f51ad6fdf3d3a1380d864a310e832f1", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_pack_into_box": {"code": "class AtomGroupMethodsBench:\n    def time_pack_into_box(self, num_atoms):\n        \"\"\"Benchmark shifting atoms of ag\n        into primary unit cell, using\n        default parameters.\n        \"\"\"\n        self.ag.pack_into_box()\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_pack_into_box", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "54f8934b8fe61ba797a7909743b108e39de31f183b1e1ae485cf0f6ce32462c7", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_rotate": {"code": "class AtomGroupMethodsBench:\n    def time_rotate(self, num_atoms):\n        \"\"\"Benchmark simple rotation operation\n        on atomgroup.\n        \"\"\"\n        self.ag.rotate(self.rot_matrix)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_rotate", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6e1749c80e708a81dc9b1c9e930f935e6c602721ffd2c8aaef3124f78895e3fc", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_rotateby": {"code": "class AtomGroupMethodsBench:\n    def time_rotateby(self, num_atoms):\n        \"\"\"Benchmark rotation by an angle\n        of the ag coordinates.\n        \"\"\"\n        self.ag.rotateby(angle=45,\n                         axis=[1,0,0])\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_rotateby", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3a363526876a2804ba8aa888ffe51737d852a4f374b4afcea48089e448dd31cb", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_split": {"code": "class AtomGroupMethodsBench:\n    def time_split(self, num_atoms):\n        \"\"\"Benchmark ag splitting into\n        multiple ags based on a simple\n        criterion.\n        \"\"\"\n        self.ag.split('residue')\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_split", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "416f626f3c7231a69b7aeff75fba459fe50c0154712be099617e3bbb6e5916d4", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_subtract": {"code": "class AtomGroupMethodsBench:\n    def time_subtract(self, num_atoms):\n        \"\"\"Benchmark ag subtraction.\n        \"\"\"\n        self.ag.subtract(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_subtract", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a850d565fa6aecc39128e9d35a85496508288f8b8989d9fdb21f77796d838786", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_symmetric_difference": {"code": "class AtomGroupMethodsBench:\n    def time_symmetric_difference(self, num_atoms):\n        \"\"\"Benchmark ag symmetric difference\n        operation.\n        \"\"\"\n        self.ag.symmetric_difference(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_symmetric_difference", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0f5ae06c5f76555fb6a63e41f85fd32373e10d49a309803a4b06be75e05ec0a9", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_transform": {"code": "class AtomGroupMethodsBench:\n    def time_transform(self, num_atoms):\n        \"\"\"Benchmark application of transformation\n        matrix to atomgroup.\n        \"\"\"\n        self.ag.transform(self.trans)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_transform", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6dc5031197d6b02edba0f8d4bd19cec798be5c5b740547575f7cade39a38b391", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_translate": {"code": "class AtomGroupMethodsBench:\n    def time_translate(self, num_atoms):\n        \"\"\"Benchmark the application of a\n        translation vector to the ag\n        coordinates.\n        \"\"\"\n        self.ag.translate([0,0.5,1])\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_translate", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "97a8195e6e8cd22f3b5cfa3a9f162d518b497d64e2cd734e91212b74e9620d3a", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_union": {"code": "class AtomGroupMethodsBench:\n    def time_union(self, num_atoms):\n        \"\"\"Benchmark union operation\n        on atomgroups.\n        \"\"\"\n        self.ag.union(self.ag)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_union", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3e19a73408a52eca4f12d1df1f083093bf51de80adc8a78f3448451658ae113b", "warmup_time": -1}, "ag_methods.AtomGroupMethodsBench.time_wrap": {"code": "class AtomGroupMethodsBench:\n    def time_wrap(self, num_atoms):\n        \"\"\"Benchmark wrap() operation on\n        atomgroup with default params.\n        \"\"\"\n        self.ag.wrap()\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.weights = np.ones(num_atoms)\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}\n        self.rot_matrix = np.ones((3,3))\n        self.trans = np.ones((4,4))", "min_run_count": 2, "name": "ag_methods.AtomGroupMethodsBench.time_wrap", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e17b327697d267cf044412cc544be3b2e309edad29b10d0ab5af64a7b847d269", "warmup_time": -1}, "ag_methods.FragmentFinding.time_find_fragments": {"code": "class FragmentFinding:\n    def time_find_fragments(self, universe_type):\n        frags = self.u.atoms.fragments\n\n    def setup(self, universe_type):\n        if universe_type == 'large_fragment_small_solvents':\n            univ = (TPR, XTC)\n        elif universe_type == 'large_fragment':\n            univ = (PSF, DCD)\n        else:\n            univ = (TRZ_psf, TRZ)\n        self.u = MDAnalysis.Universe(*univ)", "min_run_count": 2, "name": "ag_methods.FragmentFinding.time_find_fragments", "number": 0, "param_names": ["universe_type"], "params": [["'large_fragment_small_solvents'", "'large_fragment'", "'polymer_chains'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7629f34633e0ba4daad90ab0adc33965e3f05cd82382570a2941d46085851b39", "warmup_time": -1}, "analysis.distances.DistancesBench.time_between": {"code": "class DistancesBench:\n    def time_between(self, num_atoms):\n        \"\"\"Benchmark determination of subgroup\n        of atomgroup that is within a specific\n        distance of two other atomgroups.\n        \"\"\"\n        distances.between(group=self.ag3,\n                          A=self.ag1,\n                          B=self.ag2,\n                          distance=15.0)\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_between", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eb885148f4da07fe9037d6f5c72f6730a0389638e247a928686fcbd8a19214da", "warmup_time": -1}, "analysis.distances.DistancesBench.time_contact_matrix": {"code": "class DistancesBench:\n    def time_contact_matrix(self, num_atoms):\n        \"\"\"Benchmark calculation of contacts within\n        a single numpy array using the default arguments\n        to contact_matrix.\n        \"\"\"\n        distances.contact_matrix(coord=self.coords_1,\n                                 cutoff=15.0,\n                                 returntype='numpy',\n                                 box=None)\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_contact_matrix", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6e4d4f50f6cb85908c188ebfd6de7c40fa3d3df6afef146e01518c709445ccd0", "warmup_time": -1}, "analysis.distances.DistancesBench.time_contact_matrix_sparse": {"code": "class DistancesBench:\n    def time_contact_matrix_sparse(self, num_atoms):\n        \"\"\"Benchmark calculation of contacts within\n        a single numpy array using the slower reduced\n        memory implementation of contact_matrix intended\n        for larger systems.\n        \"\"\"\n        distances.contact_matrix(coord=self.coords_1,\n                                 cutoff=15.0,\n                                 returntype='sparse',\n                                 box=None)\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_contact_matrix_sparse", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4e6d14cd551f572db95de56c5260a5490105139c9c439440473639dcac59bf56", "warmup_time": -1}, "analysis.distances.DistancesBench.time_dist": {"code": "class DistancesBench:\n    def time_dist(self, num_atoms):\n        \"\"\"Benchmark calculation of distances between\n        atoms in two atomgroups with no offsets\n        to resids.\n        \"\"\"\n        distances.dist(A=self.ag1,\n                       B=self.ag2,\n                       offset=0)\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_dist", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e316d102d15001127985bbeadcda61a289f6b0c49edf8beb7c8ac292fc70883", "warmup_time": -1}, "analysis.distances.DistancesBench.time_dist_offsets": {"code": "class DistancesBench:\n    def time_dist_offsets(self, num_atoms):\n        \"\"\"Benchmark calculation of distances between\n        atoms in two atomgroups with offsets\n        to resids.\n        \"\"\"\n        distances.dist(A=self.ag1,\n                       B=self.ag2,\n                       offset=20)\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_dist_offsets", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0766fec1b0ea981f2f91bc7b592c2c7faa4c27e5821747d0e3f7f27ad30f22e6", "warmup_time": -1}, "analysis.distances.DistancesBench.time_distance_array": {"code": "class DistancesBench:\n    def time_distance_array(self, num_atoms):\n        \"\"\"Benchmark calculation of all distances\n        between two numpy arrays of coordinates,\n        using default arguments to distance_array.\n        \"\"\"\n        distances.distance_array(reference=self.coords_1,\n                                 configuration=self.coords_2,\n                                 box=None,\n                                 result=None,\n                                 backend='serial')\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_distance_array", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b47aceaee90f91587947029fdaef396adac215eb2ef3057c85f9e410a3e5fa7", "warmup_time": -1}, "analysis.distances.DistancesBench.time_distance_array_pre_allocated": {"code": "class DistancesBench:\n    def time_distance_array_pre_allocated(self, num_atoms):\n        \"\"\"Benchmark calculation of all distances\n        between two numpy arrays of coordinates,\n        using distance_array with a preallocated\n        result array.\n        \"\"\"\n        distances.distance_array(reference=self.coords_1,\n                                 configuration=self.coords_2,\n                                 box=None,\n                                 result=self.allocated_array_2D,\n                                 backend='serial')\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_distance_array_pre_allocated", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3988cf77ee5eccd5483b603b31c7c25b63f73aa81b757689f2c8bdd9f062ae82", "warmup_time": -1}, "analysis.distances.DistancesBench.time_self_distance_array": {"code": "class DistancesBench:\n    def time_self_distance_array(self, num_atoms):\n        \"\"\"Benchmark calculation of all distances\n        within a single numpy array of coordinates\n        using default parameters to self_distance_array.\n        \"\"\"\n        distances.self_distance_array(reference=self.coords_1,\n                                      box=None,\n                                      result=None,\n                                      backend='serial')\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_self_distance_array", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c6dbef3ff4b6c03b07405740d628a4dbd6c5e558b910137a157196ed94020286", "warmup_time": -1}, "analysis.distances.DistancesBench.time_self_distance_array_pre_allocated": {"code": "class DistancesBench:\n    def time_self_distance_array_pre_allocated(self, num_atoms):\n        \"\"\"Benchmark calculation of all distances\n        within a single numpy array of coordinates\n        using self_distance_array with preallocated\n        result array.\n        \"\"\"\n        distances.self_distance_array(reference=self.coords_1,\n                                      box=None,\n                                      result=self.allocated_array_1D,\n                                      backend='serial')\n\n    def setup(self, num_atoms):\n        np.random.seed(17809)\n        self.coords_1 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        np.random.seed(9008716)\n        self.coords_2 = np.random.random_sample((num_atoms, 3)).astype(np.float32)\n        self.allocated_array_2D = np.empty((num_atoms, num_atoms),\n                                            dtype=np.float64)\n        self.array_shape_1D = int(num_atoms * (num_atoms - 1) / 2.)\n        self.allocated_array_1D = np.empty(self.array_shape_1D,\n                                           dtype=np.float64)\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag1 = self.u.atoms[:num_atoms]\n        self.ag2 = self.u.atoms[num_atoms: 2 * num_atoms]\n        self.ag3 = self.u.atoms[-num_atoms:]", "min_run_count": 2, "name": "analysis.distances.DistancesBench.time_self_distance_array_pre_allocated", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "252de8a508db72096fb84cad267be871be5133ab5e2a35ea5b1dbf4d610c3f4e", "warmup_time": -1}, "analysis.leaflet.LeafletBench.time_leafletfinder": {"code": "class LeafletBench:\n    def time_leafletfinder(self, cutoff, sparse, pbc):\n        \"\"\"Benchmark LeafletFinder for test lipid\n        membrane system.\n        \"\"\"\n        leaflet.LeafletFinder(universe=self.u,\n                              select=self.headgroup_sel,\n                              cutoff=cutoff,\n                              pbc=pbc,\n                              sparse=sparse)\n\n    def setup(self, cutoff, sparse, pbc):\n        self.u = MDAnalysis.Universe(Martini_membrane_gro)\n        self.headgroup_sel = 'name PO4'", "min_run_count": 2, "name": "analysis.leaflet.LeafletBench.time_leafletfinder", "number": 0, "param_names": ["cutoff", "sparse", "pbc"], "params": [["7.0", "15.0", "23.0"], ["None", "True", "False"], ["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2458c4484b875134228107f4bce8daa33aeb344a704e3af71edcbb03b58fc057", "warmup_time": -1}, "analysis.leaflet.LeafletOptimizeBench.time_optimize_cutoff": {"code": "class LeafletOptimizeBench:\n    def time_optimize_cutoff(self, sparse, pbc):\n        \"\"\"Benchmark optimize_cutoff for test lipid\n        membrane system using default network distance\n        range.\n        \"\"\"\n        leaflet.optimize_cutoff(universe=self.u,\n                                select=self.headgroup_sel,\n                                pbc=pbc,\n                                sparse=sparse)\n\n    def setup(self, sparse, pbc):\n        self.u = MDAnalysis.Universe(Martini_membrane_gro)\n        self.headgroup_sel = 'name PO4'", "min_run_count": 2, "name": "analysis.leaflet.LeafletOptimizeBench.time_optimize_cutoff", "number": 0, "param_names": ["sparse", "pbc"], "params": [["None", "True", "False"], ["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "73a3a56d78b0454ad8df949ea3929d5b1281bea8bc6afb57e61589b4d99c688c", "warmup_time": -1}, "analysis.psa.PSA_get_coord_axesBench.time_get_coord_axes": {"code": "class PSA_get_coord_axesBench:\n    def time_get_coord_axes(self, time_steps, n_atoms):\n        \"\"\"Benchmark get_coord_axes in psa module\n        \"\"\"\n        psa.get_coord_axes(path=self.path)\n\n    def setup(self, time_steps, n_atoms):\n        np.random.seed(170089)\n        # only using condensed path input\n        # data structure for now\n        self.path = np.random.rand(time_steps,\n                                   n_atoms * 3)", "min_run_count": 2, "name": "analysis.psa.PSA_get_coord_axesBench.time_get_coord_axes", "number": 0, "param_names": ["time_steps", "n_atoms"], "params": [["10", "100", "1000"], ["5", "25", "50"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "86cb5086b8445a130e30b1506114ef9279166f177f3b89ad2641253d58117f93", "warmup_time": -1}, "analysis.psa.PSA_get_msd_matrixBench.time_get_msd_matrix": {"code": "class PSA_get_msd_matrixBench:\n    def time_get_msd_matrix(self, time_steps, n_atoms):\n        \"\"\"Benchmark for get_msd_matrix in psa module\n        \"\"\"\n        # only default argument for axis is benchmarked\n        psa.get_msd_matrix(P=self.P,\n                           Q=self.Q,\n                           axis=None)\n\n    def setup(self, time_steps, n_atoms):\n        np.random.seed(170089)\n        self.P = np.random.rand(time_steps,\n                                n_atoms,\n                                3)\n        np.random.seed(971132)\n        self.Q = np.random.rand(time_steps,\n                                n_atoms,\n                                3)", "min_run_count": 2, "name": "analysis.psa.PSA_get_msd_matrixBench.time_get_msd_matrix", "number": 0, "param_names": ["time_steps", "n_atoms"], "params": [["10", "100", "1000"], ["5", "25", "50"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9dcdda75f655ab20762a5a9c171d804a3f908f3b76043f3fb66e1c5e471aa2c0", "warmup_time": -1}, "analysis.psa.PSA_get_path_metric_funcBench.time_get_path_metric_func": {"code": "class PSA_get_path_metric_funcBench:\n    def time_get_path_metric_func(self, path_metric):\n        \"\"\"Benchmark for get_path_metric_func in psa\n        module\n        \"\"\"\n        psa.get_path_metric_func(name=path_metric)", "min_run_count": 2, "name": "analysis.psa.PSA_get_path_metric_funcBench.time_get_path_metric_func", "number": 0, "param_names": ["path_metric"], "params": [["'hausdorff'", "'weighted_average_hausdorff'", "'average_hausdorff'", "'hausdorff_neighbors'", "'discrete_frechet'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fc71d48ec5e111b5f38e7d741ab5f63fc3c8615325be6916878225ada0d3e828", "warmup_time": -1}, "analysis.psa.PSA_metricBench.time_discrete_frechet": {"code": "class PSA_metricBench:\n    def time_discrete_frechet(self, time_steps, n_atoms):\n        \"\"\"Benchmark for discrete_frechet() in psa module.\n        \"\"\"\n        psa.discrete_frechet(P=self.P,\n                             Q=self.Q)\n\n    def setup(self, time_steps, n_atoms):\n        np.random.seed(170089)\n        self.P = np.random.rand(time_steps,\n                                n_atoms,\n                                3)\n        np.random.seed(971132)\n        self.Q = np.random.rand(time_steps,\n                                n_atoms,\n                                3)", "min_run_count": 2, "name": "analysis.psa.PSA_metricBench.time_discrete_frechet", "number": 0, "param_names": ["time_steps", "n_atoms"], "params": [["10", "100", "200"], ["5", "25", "50"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3bb3d861752ef9ed6f77ac94cad9ed2e42c56d8df988a838892b313d1104b7cb", "warmup_time": -1}, "analysis.psa.PSA_metricBench.time_hausdorff": {"code": "class PSA_metricBench:\n    def time_hausdorff(self, time_steps, n_atoms):\n        \"\"\"Benchmark for hausdorff() in psa module.\n        \"\"\"\n        psa.hausdorff(P=self.P,\n                      Q=self.Q)\n\n    def setup(self, time_steps, n_atoms):\n        np.random.seed(170089)\n        self.P = np.random.rand(time_steps,\n                                n_atoms,\n                                3)\n        np.random.seed(971132)\n        self.Q = np.random.rand(time_steps,\n                                n_atoms,\n                                3)", "min_run_count": 2, "name": "analysis.psa.PSA_metricBench.time_hausdorff", "number": 0, "param_names": ["time_steps", "n_atoms"], "params": [["10", "100", "200"], ["5", "25", "50"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e0c90539a3b87665619c0c5923a412b1457f5cf08564b891b2ea25345fc720fc", "warmup_time": -1}, "analysis.psa.PSA_metricBench.time_hausdorff_avg": {"code": "class PSA_metricBench:\n    def time_hausdorff_avg(self, time_steps, n_atoms):\n        \"\"\"Benchmark for hausdorff_avg() in psa module.\n        \"\"\"\n        psa.hausdorff_avg(P=self.P,\n                          Q=self.Q)\n\n    def setup(self, time_steps, n_atoms):\n        np.random.seed(170089)\n        self.P = np.random.rand(time_steps,\n                                n_atoms,\n                                3)\n        np.random.seed(971132)\n        self.Q = np.random.rand(time_steps,\n                                n_atoms,\n                                3)", "min_run_count": 2, "name": "analysis.psa.PSA_metricBench.time_hausdorff_avg", "number": 0, "param_names": ["time_steps", "n_atoms"], "params": [["10", "100", "200"], ["5", "25", "50"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bda335edfdd48be1e40d51ba67bd57127dc22570ed81c79b25c9c34e98073cad", "warmup_time": -1}, "analysis.psa.PSA_metricBench.time_hausdorff_neighbors": {"code": "class PSA_metricBench:\n    def time_hausdorff_neighbors(self, time_steps, n_atoms):\n        \"\"\"Benchmark for hausdorff_neighbors() in psa module.\n        \"\"\"\n        psa.hausdorff_neighbors(P=self.P,\n                                Q=self.Q)\n\n    def setup(self, time_steps, n_atoms):\n        np.random.seed(170089)\n        self.P = np.random.rand(time_steps,\n                                n_atoms,\n                                3)\n        np.random.seed(971132)\n        self.Q = np.random.rand(time_steps,\n                                n_atoms,\n                                3)", "min_run_count": 2, "name": "analysis.psa.PSA_metricBench.time_hausdorff_neighbors", "number": 0, "param_names": ["time_steps", "n_atoms"], "params": [["10", "100", "200"], ["5", "25", "50"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "77321a9a92915cf788b65037e075327c72374c4f6dd8a105749c502756260a7a", "warmup_time": -1}, "analysis.psa.PSA_metricBench.time_hausdorff_wavg": {"code": "class PSA_metricBench:\n    def time_hausdorff_wavg(self, time_steps, n_atoms):\n        \"\"\"Benchmark for hausdorff_wavg() in psa module.\n        \"\"\"\n        psa.hausdorff_wavg(P=self.P,\n                           Q=self.Q)\n\n    def setup(self, time_steps, n_atoms):\n        np.random.seed(170089)\n        self.P = np.random.rand(time_steps,\n                                n_atoms,\n                                3)\n        np.random.seed(971132)\n        self.Q = np.random.rand(time_steps,\n                                n_atoms,\n                                3)", "min_run_count": 2, "name": "analysis.psa.PSA_metricBench.time_hausdorff_wavg", "number": 0, "param_names": ["time_steps", "n_atoms"], "params": [["10", "100", "200"], ["5", "25", "50"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "162c1711b4953d5045859022df8b1477ad41b166cf80dc31e0b961c87761ed81", "warmup_time": -1}, "analysis.psa.PSA_sqnormBench.time_sqnorm": {"code": "class PSA_sqnormBench:\n    def time_sqnorm(self, num_cols, num_rows, axis):\n        \"\"\"Benchmark sqnorm in psa module\n        \"\"\"\n        psa.sqnorm(v=self.v, axis=axis)\n\n    def setup(self, num_cols, num_rows, axis):\n        np.random.seed(170089)\n        self.v = np.random.rand(num_rows, num_cols)", "min_run_count": 2, "name": "analysis.psa.PSA_sqnormBench.time_sqnorm", "number": 0, "param_names": ["num_cols", "num_rows", "axis"], "params": [["2", "3", "4"], ["100", "1000", "10000"], ["None", "0", "1", "-1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5360f9d9650b651e056f22f98fd02bda2307b2f2eabb3fbe7c1c4b0dffe5f70b", "warmup_time": -1}, "analysis.rdf.SimpleRdfBench.time_interrdf": {"code": "class SimpleRdfBench:\n    def time_interrdf(self, nbins, range_val, natoms):\n        \"\"\"Benchmark a full trajectory parse\n        by MDAnalysis.analysis.rdf.InterRDF\n        \"\"\"\n        self.rdf.run()\n\n    def setup(self, nbins, range_val, natoms):\n    \n        self.sel_str = 'name OW'\n    \n        self.u = MDAnalysis.Universe(TPR, XTC)\n    \n        try:\n            self.sel = self.u.select_atoms(self.sel_str)[:natoms]\n        except AttributeError:\n            self.sel = self.u.selectAtoms(self.sel_str)[:natoms]\n    \n        # do not include initialization of the\n        # InterRDF object in the benchmark itself\n    \n        self.rdf = InterRDF(g1=self.sel,\n                            g2=self.sel,\n                            nbins=nbins,\n                            range=range_val)", "min_run_count": 2, "name": "analysis.rdf.SimpleRdfBench.time_interrdf", "number": 0, "param_names": ["nbins", "range_val", "natoms"], "params": [["20", "75", "200"], ["[0, 5]", "[0, 15]", "[0, 20]"], ["1", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "834273d73c592c18978de979c278573fc8d7997972d1e690ed8efbbeadf8ca08", "warmup_time": -1}, "analysis.rms.RmsdTrajBench.time_RMSD": {"code": "class RmsdTrajBench:\n    def time_RMSD(self, select, weights):\n        \"\"\"Benchmark RMSD.run() method, which parses\n        over the entire trajectory.\n        \"\"\"\n        self.RMSD_inst.run()\n\n    def setup(self, select, weights):\n        self.u = MDAnalysis.Universe(PSF, DCD)\n        self.RMSD_inst = rms.RMSD(atomgroup=self.u,\n                                  reference=None,\n                                  select=select,\n                                  weights=weights)", "min_run_count": 2, "name": "analysis.rms.RmsdTrajBench.time_RMSD", "number": 0, "param_names": ["select", "weights"], "params": [["'all'", "'backbone'"], ["None", "'mass'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "64836ac01572a5047b1dd99fff0059e19db814e8d869fba0f667e8ce391dab94", "warmup_time": -1}, "analysis.rms.RmsfTrajBench.time_RMSF": {"code": "class RmsfTrajBench:\n    def time_RMSF(self, n_atoms, step, weights):\n        \"\"\"Benchmark RMSF.run() method, which parses\n        over the entire trajectory.\n        \"\"\"\n        self.RMSF_inst.run(step=step)\n\n    def setup(self, n_atoms, step, weights):\n        self.u = MDAnalysis.Universe(PSF, DCD)\n        self.ag = self.u.atoms[:n_atoms]\n        self.RMSF_inst = rms.RMSF(atomgroup=self.ag,\n                                  weights=weights)", "min_run_count": 2, "name": "analysis.rms.RmsfTrajBench.time_RMSF", "number": 0, "param_names": ["n_atoms", "step", "weights"], "params": [["100", "500", "2000"], ["None", "3"], ["None", "'mass'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "99e0776f38969e49506709a4f7297c981a8d81c0febde80cbbc90d2f0f163b4c", "warmup_time": -1}, "analysis.rms.SimpleRmsBench.time_rmsd": {"code": "class SimpleRmsBench:\n    def time_rmsd(self, num_atoms, weights, center, superposition):\n        \"\"\"Benchmark rmsd function using a setup similar to\n        its docstring example code along with several possible\n        permutations of parameters.\n        \"\"\"\n        rms.rmsd(a=self.A,\n                 b=self.B,\n                 weights=weights,\n                 center=center,\n                 superposition=superposition)\n\n    def setup(self, num_atoms, weights, center, superposition):\n        # mimic rmsd docstring example code\n        self.u = MDAnalysis.Universe(PSF, DCD)\n        # ag.positions is the new syntax\n        # but older commit hashes will need to use\n        # ag.coordinates()\n        try:\n            self.A = self.u.atoms.positions.copy()[:num_atoms]\n            self.u.trajectory[-1]\n            self.B = self.u.atoms.positions.copy()[:num_atoms]\n        except:\n            self.A = self.u.atoms.coordinates().copy()[:num_atoms]\n            self.u.trajectory[-1]\n            self.B = self.u.atoms.coordinates().copy()[:num_atoms]", "min_run_count": 2, "name": "analysis.rms.SimpleRmsBench.time_rmsd", "number": 0, "param_names": ["num_atoms", "weights", "center", "superposition"], "params": [["100", "500", "2000"], ["None", "[1.0, 0.5]"], ["False", "True"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3730cce32247fa610cb1fcb58e054dc42bd0d1dd6ee55a5d19e01cff3ade58d1", "warmup_time": -1}, "import.ImportBench.time_import": {"code": "class ImportBench:\n    def time_import(self):\n        \"\"\"Benchmark time needed to import MDAnalysis\n        \"\"\"\n        import MDAnalysis as mda\n        pass", "min_run_count": 2, "name": "import.ImportBench.time_import", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "61f437034b6040b9faf8e324049e743318ff56255c98cd868a547bac5c256124", "warmup_time": -1}, "selections.GeoSelectionBench.time_geometric_selections": {"code": "class GeoSelectionBench:\n    def time_geometric_selections(self,\n                                  selection_string,\n                                  dynamic_selection,\n                                  periodic_selection):\n    \n        # set core flags for PBC accounting\n        MDAnalysis.core.flags['use_periodic_selections'] = periodic_selection[0]\n        MDAnalysis.core.flags['use_KDTree_routines'] = periodic_selection[1]\n    \n        if hasattr(MDAnalysis.Universe, 'select_atoms'):\n            self.u.select_atoms(selection_string, updating=dynamic_selection)\n        else:\n            self.u.selectAtoms(selection_string, updating=dynamic_selection)\n\n    def setup(self,\n              selection_string,\n              dynamic_selection,\n              periodic_selection):\n        self.u = MDAnalysis.Universe(GRO)", "min_run_count": 2, "name": "selections.GeoSelectionBench.time_geometric_selections", "number": 0, "param_names": ["selection_string", "dynamic_selection", "periodic_selection"], "params": [["'around 5.0 resid 1'", "'sphlayer 2.4 6.0 (protein)'", "'sphzone 6.0 (protein)'", "'cylayer 5 10 10 -8 protein'", "'cyzone 15 4 -8 protein'", "'point 5.0 5.0 5.0 3.5'", "'prop z >= 5.0'", "'prop abs z <= 5.0'"], ["True", "False"], ["[False, True]", "[True, False]"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b1d29e5a574daee7de2e1c37536258165a3371b550cd29fc2f41c55e796001e1", "warmup_time": -1}, "selections.SimpleSelectionBench.time_simple_selections": {"code": "class SimpleSelectionBench:\n    def time_simple_selections(self, selection_string):\n        \"\"\"Benchmark simple selections on the protein-based\n        standard test GRO file.\n        \"\"\"\n        if hasattr(MDAnalysis.Universe, 'select_atoms'):\n            self.u.select_atoms(selection_string)\n        else:\n            self.u.selectAtoms(selection_string)\n\n    def setup(self, selection_string):\n        self.u = MDAnalysis.Universe(GRO)", "min_run_count": 2, "name": "selections.SimpleSelectionBench.time_simple_selections", "number": 0, "param_names": ["selection_string"], "params": [["'protein'", "'backbone'", "'nucleic'", "'nucleicbackbone'", "'resid 1:10'", "'resnum 1:10'", "'resname LYS'", "'name CA'", "'bynum 0:10'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3d7336e8388a8daf7d76bc3faec4ee662f2ddce17529d2b322ec539be91758c3", "warmup_time": -1}, "topology.TopologyGuessBench.time_guessbonds": {"code": "class TopologyGuessBench:\n    def time_guessbonds(self, num_atoms):\n        \"\"\"Benchmark for guessing bonds\"\"\"\n        guessers.guess_bonds(self.ag, self.ag.positions,\n                             box=self.ag.dimensions,\n                             vdwradii=self.vdwradii)\n\n    def setup(self, num_atoms):\n        self.u = MDAnalysis.Universe(GRO)\n        self.ag = self.u.atoms[:num_atoms]\n        self.vdwradii = {'H':1.0,\n                         'C':1.0,\n                         'N':1.0,\n                         'O':1.0,\n                         'DUMMY':1.0}", "min_run_count": 2, "name": "topology.TopologyGuessBench.time_guessbonds", "number": 0, "param_names": ["num_atoms"], "params": [["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c8b85b9228a93b83692b65e61c7a9fdd017ca22d7702f18034d1a5f2c068bcb7", "warmup_time": -1}, "traj_reader.TrajReaderCreation.time_reads": {"code": "class TrajReaderCreation:\n    def time_reads(self, traj_format):\n        \"\"\"Simple benchmark for reading traj file formats\n        from our standard test files.\n        \"\"\"\n        self.traj_reader(self.traj_file)\n\n    def setup(self, traj_format):\n        self.traj_dict = traj_dict\n        self.traj_file, self.traj_reader = self.traj_dict[traj_format]", "min_run_count": 2, "name": "traj_reader.TrajReaderCreation.time_reads", "number": 0, "param_names": ["traj_format"], "params": [["'XTC'", "'TRR'", "'DCD'", "'NCDF'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4b030c7c2af116b5eaaec4c77913ed39dda95d0f355f11be9ee99403dfa71f93", "warmup_time": -1}, "traj_reader.TrajReaderIteration.time_strides": {"code": "class TrajReaderIteration:\n    def time_strides(self, traj_format):\n        \"\"\"Benchmark striding over full trajectory\n        test files for each format.\n        \"\"\"\n        for ts in self.reader_object:\n            pass\n\n    def setup(self, traj_format):\n        self.traj_dict = traj_dict\n        self.traj_file, self.traj_reader = self.traj_dict[traj_format]\n        self.reader_object = self.traj_reader(self.traj_file)", "min_run_count": 2, "name": "traj_reader.TrajReaderIteration.time_strides", "number": 0, "param_names": ["traj_format"], "params": [["'XTC'", "'TRR'", "'DCD'", "'NCDF'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d2890f87c636b5336c33c4ede5c97f90f26b52ea890f4514459dee27de3b92fc", "warmup_time": -1}}, "machines": {"gp160": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i9-7900X CPU @ 3.30GHz", "machine": "gp160", "os": "Linux 4.10.0-35-generic", "ram": "128GB", "version": 1}, "c3potato": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E3-1226 v3 @ 3.30GHz", "machine": "c3potato", "os": "Linux 3.16.0-4-amd64", "ram": "16GB", "version": 1}}, "tags": {"RotamerConvolveMD-1.0": 1133, "data-0-7-4": 605, "pre-release-0-7-0-rc3": 350, "pre-sub-trr": 964, "prerelease-0-6-0-rc2": 152, "prerelease-0-6-rc1": 139, "prerelease-0.8.0-pre-1": 1046, "rel-0-5-0": 82, "release-0-5-1": 104, "release-0-6-0": 154, "release-0-6-1": 170, "release-0-6-2": 205, "release-0-6-3": 256, "release-0-6-4": 283, "release-0-6-4-1": 289, "release-0-7-0": 381, "release-0-7-1": 429, "release-0-7-2": 483, "release-0-7-3": 554, "release-0-7-4": 604, "release-0.10.0": 1482, "release-0.11.0": 1834, "release-0.12.0": 1979, "release-0.12.1": 2011, "release-0.13.0": 2515, "release-0.14.0": 2925, "release-0.15.0": 3265, "release-0.16.0": 5063, "release-0.16.1": 5323, "release-0.16.2": 5542, "release-0.17.0": 6680, "release-0.18.0": 7138, "release-0.19.0": 8267, "release-0.19.1": 8339, "release-0.19.2": 8346, "release-0.20.0": 9157, "release-0.20.1": 9176, "release-0.7.5": 680, "release-0.7.5.1": 698, "release-0.7.6": 810, "release-0.8.0": 1142, "release-0.8.0rc2": 1096, "release-0.8.0rc3": 1105, "release-0.8.0rc4": 1122, "release-0.8.1": 1188, "release-0.8.1rc1": 1163, "release-0.9.0": 1337, "release-0.9.1": 1357, "release-0.9.2": 1389, "release-1.0.0": 11192, "testdata-0-7-4": 609}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}